{"remainingRequest":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/src/views/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/src/views/Dashboard.vue","mtime":1638505267916},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/cache-loader/dist/cjs.js","mtime":1637278779191},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/babel-loader/lib/index.js","mtime":1637278778721},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/cache-loader/dist/cjs.js","mtime":1637278779191},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/index.js","mtime":1637278782397}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Dashboard.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"about\">\n    <b-tabs content-class=\"mt-3\">\n        <b-tab title=\"Line Chart\" active>\n            <h1>Interactive & Animated Line Chart</h1>\n            <div class=\"title\"> Number Of Delayed Flight Count For Carriers Through Time</div>\n            <br />\n            <label class=\"guideline\">\n              Show Guideline & Curtain\n              <input type=\"checkbox\" id=\"show_guideline\" />\n            </label>\n            <br />\n            <svg width=\"1200\" height=\"600\" id=\"line_chart\"></svg>\n        </b-tab>\n\n        <b-tab title=\"D3 Layout\">\n            <h1>D3 Animated Treemap</h1>\n            <div class=\"title\"> Number Of Delayed Flight Count For Carriers Through Time</div>\n            <svg width=\"954\" height=\"954\" id=\"treemap\"></svg>\n        </b-tab>\n    </b-tabs>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\nimport {nest} from 'd3-collection';\n\nexport default {\n  name: 'd3Chart',\n  data: function () {\n    return {\n      rawData: null,\n      lineData: null,\n      region:null,\n      treemapData:null\n    }\n  },\n  methods: {\n    chart(){\n\n      var width = 800;\n      var height = 600;\n      var margin = 50;\n      var xScale = d3.scaleLinear()\n                .domain([0,2021])\n                .range([0, width]);\n\n      var yScale = d3.scaleLinear()\n                .domain([0, 1000])\n                .range([height, 0]);\n\n      var svg = d3.select(\"#line_chart\")\n              .append(\"svg\")\n              .attr(\"width\", width+margin)\n              .attr(\"height\", height+margin)\n              .append('g')\n              .attr(\"transform\", `translate(${margin}, ${margin})`);\n              \n      var xAxis = d3.axisBottom(xScale).ticks(5);\n      var yAxis = d3.axisLeft(yScale).ticks(5);\n\n      svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", `translate(0, ${height-margin})`)\n        .call(xAxis)\n        .text(\"Year\");\n        \n        svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(yAxis)\n        .append('text')\n        .attr(\"y\", 15)\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"fill\", \"#000\")\n        .text(\"Number of Delayed Flights\");\n    },\n    buildLineChart() {\n      /*var width = 800;\n      var height = 800;\n      var margin = 50;\n      var duration = 250;\n      */\n      var lineOpacity = \"0.25\";\n      var lineOpacityHover = \"0.85\";\n      var otherLinesOpacityHover = \"0.25\";\n      var lineStroke = \"2px\";\n      var lineStrokeHover = \"3.5px\";\n      /*\n      var circleOpacity = '0.85';\n      var circleOpacityOnLineHover = \"0.25\"\n      var circleRadius = 3;\n      var circleRadiusHover = 6;*/\n\n      var parseDate = d3.timeParse(\"%Y-%m-%d\");\n\n      var data = this.lineData;\n      //console.log(data[0].FL_DATE); //this works\n\n      data.forEach(function(d) { \n        d.date = parseDate(d.FL_DATE);\n        d.carrier = d.MKT_UNIQUE_CARRIER;\n        d.delay = +d.NUM_OF_DELAY;  \n\n      });\n\n      \n      var sumstat = nest() // nest function allows to group the calculation per level of a factor\n          .key(function(d) { return d.carrier;})\n          .entries(data);\n\n      console.log(sumstat); //working\n\n      var arr_time = d3.extent(data, function(d) { return d.date; })\n      \n      var margin = {top: 10, right: 30, bottom: 30, left: 60},\n          width = 1200 - margin.left - margin.right,\n          height = 600 - margin.top - margin.bottom;\n\n      // append the svg object to the body of the page\n      var svg = d3.select(\"#line_chart\")\n        .append(\"svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n          .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      //console.log(arr_time); //working\n      //Add x-axis\n      var x = d3.scaleLinear()\n        .domain(arr_time)\n        .range([ 0, width ]);\n      svg.append(\"g\")\n        .transition()\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x).ticks(32).tickFormat(d3.timeFormat('%b %d')));\n\n      var max_data = d3.max(data, function(d) { return +d.delay; })\n      console.log(max_data)\n\n      // Add y-axis\n      var y = d3.scaleLinear()\n        .domain([0, max_data])\n        .range([ height, 0 ]);\n      svg.append(\"g\")\n        .call(d3.axisLeft(y))\n        .append('text')\n        .attr(\"x\", -150)\n        .attr(\"y\", -40)\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"fill\", \"#696969\")\n        .attr(\"font-size\", \"14px\")\n        .text(\"Number of Delayed Flights\");\n\n      var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n      const transitionPath = d3\n        .transition()\n        .ease(d3.easeSin)\n        .duration(1000);\n      console.log(transitionPath)\n\n      svg.selectAll(\".line\")\n      .data(sumstat)\n      .enter()\n      .append(\"path\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", function(d){ return color(d.key) })\n        .attr(\"stroke-width\", lineStroke)\n        .attr(\"opacity\", lineOpacity)\n        .attr(\"d\", function(d){\n          return d3.line()\n            .x(function(d) { return x(d.date); })\n            .y(function(d) { return y(+d.delay); })(d.values)\n        })\n        .on(\"mouseover\", function(d,i) {\n          console.log(i)\n            svg.append(\"text\")\n              .transition()\n              .ease(d3.easeSin)\n              .attr(\"class\", \"title-text\")\n              .style(\"fill\", color(i.key))  \n              .style(\"font-size\", \"22px\")      \n              .text(\"Carrier: \"+i.key)\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"x\", 100)\n              .attr(\"y\", 20);\n            d3.selectAll('.line')\n            .style('opacity', otherLinesOpacityHover);\n            d3.select(this)\n              .style('opacity', lineOpacityHover)\n              .style(\"stroke-width\", lineStrokeHover)\n              .style(\"cursor\", \"pointer\");\n          })\n        .on(\"mouseout\", function() {\n            svg.select(\".title-text\").remove();\n            d3.selectAll(\".line\")\n                .style('opacity', lineOpacity);\n            d3.select(this)\n              .style('opacity', lineOpacity)\n              .style(\"stroke-width\", lineStroke)\n              .style(\"cursor\", \"none\");\n          })\n          ;\n\n        \n      \n        var curtain = svg.append('rect')\n          .attr('x', -1 * width)\n          .attr('y', -1 * height)\n          .attr('height', height)\n          .attr('width', width)\n          .attr('class', 'curtain')\n          .attr('transform', 'rotate(180)')\n          .style('fill', '#ffffff');\n          \n        /* Optionally add a guideline */\n        var guideline = svg.append('line')\n          .attr('stroke', '#333')\n          .attr('stroke-width', 0)\n          .attr('class', 'guide')\n          .attr('x1', 1)\n          .attr('y1', 1)\n          .attr('x2', 1)\n          .attr('y2', height)\n          \n        /* Create a shared transition for anything we're animating */\n        var t = svg.transition()\n          .delay(750)\n          .duration(6000)\n          .ease(d3.easeLinear)\n          .on('end', function() {\n            d3.select('line.guide')\n              .transition()\n              .style('opacity', 0)\n              .remove()\n          });\n        \n        t.select('rect.curtain')\n          .attr('width', 0);\n        t.select('line.guide')\n          .attr('transform', 'translate(' + width + ', 0)')\n\n        d3.select(\"#show_guideline\").on(\"change\", function() {\n          guideline.attr('stroke-width', this.checked ? 1 : 0);\n          curtain.attr(\"opacity\", this.checked ? 0.75 : 1);\n        })                              \n    },\n    buildTreemap() {\n      var width = 954;\n      var height = 954;\n\n      const keys = d3.range(1, 32);\n      console.log(keys)\n      console.log(this.treemapData)\n\n      var data = this.treemapData;\n\n      data.forEach(function(d) { \n        d.name = d.ORIGIN_STATE_NM\n        d.values =  keys.map(key => +d[key].replace(/,/g, \"\"))\n      });\n      console.log(data)\n      \n      const regionByState = new Map(this.region.map(d => [d.State, d.Region]));\n      console.log(regionByState)\n      const divisionByState = new Map(this.region.map(d => [d.State, d.Division]));\n      console.log(divisionByState)\n\n      const group = d3.group(data, d => regionByState.get(d.ORIGIN_STATE_NM), d => divisionByState.get(d.ORIGIN_STATE_NM))\n      console.log(group)\n\n      var color = d3.scaleOrdinal(group.keys(), d3.schemeCategory10.map(d => d3.interpolateRgb(d, \"white\")(0.5)))\n      console.log(color)\n\n      var sums = keys.map((d, i) => d3.hierarchy(group).sum(d => d.values[i]).value);\n      console.log(sums)\n\n      var max = d3.max(sums);\n      console.log(max)\n\n      const treemap = d3.treemap()\n      .tile(d3.treemapResquarify)\n      .size([width, height])\n      .padding(d => d.height === 1 ? 1 : 0)\n      .round(true);\n\n      console.log(treemap)\n\n      const root = treemap(d3.hierarchy(group)\n        .sum(d => Array.isArray(d.values) ? d3.sum(d.values) : 0)\n        .sort((a, b) => b.value - a.value));\n      console.log(root)\n    \n\n    var svg = d3.select(\"#treemap\")\n        .append(\"svg\")\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", 10)\n        .style(\"overflow\", \"visible\");\n\n    var formatNumber = d3.format(\",d\");\n    var duration = 2500;\n    var parseNumber = string => +string.replace(/,/g, \"\");\n\n    var box = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(keys.map((key, i) => {\n      const value = root.sum(d => d.values[i]).value;\n      return {key, value, i, k: Math.sqrt(value / max)};\n    }).reverse())\n    .join(\"g\")\n      .attr(\"transform\", ({k}) => `translate(${(1 - k) / 2 * width},${(1 - k) / 2 * height})`)\n      .call(g => g.append(\"text\")\n          .attr(\"y\", -6)\n          .attr(\"fill\", \"#777\")\n        .selectAll(\"tspan\")\n        .data(({key, value}) => [key, ` ${formatNumber(value)}`])\n        .join(\"tspan\")\n          .attr(\"font-weight\", (d, i) => i === 0 ? \"bold\" : null)\n          .text(d => d))\n      .call(g => g.append(\"rect\")\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"#ccc\")\n          .attr(\"width\", ({k}) => k * width )\n          .attr(\"height\", ({k}) => k * height));\n      \n      console.log(box)\n\n       const leaf = svg.append(\"g\")\n          .selectAll(\"g\")\n          .data(layout(keys))\n          .join(\"g\")\n            .attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\n        console.log(leaf)\n        \n        leaf.append(\"rect\")\n            //.attr(\"id\", d => (d.leafUid = DOM.uid(\"leaf\")).id)\n            .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(keys); })\n            .attr(\"width\", d => d.x1 - d.x0)\n            .attr(\"height\", d => d.y1 - d.y0);\n        /*\n        leaf.append(\"clipPath\")\n            .attr(\"id\", d => (d.clipUid = DOM.uid(\"clip\")).id)\n          .append(\"use\")\n            .attr(\"xlink:href\", d => d.leafUid.href);\n        */\n        leaf.append(\"text\")\n            .attr(\"clip-path\", d => d.clipUid)\n          .selectAll(\"tspan\")\n          .data([group.name, formatNumber(group.value)])\n          .join(\"tspan\")\n            .attr(\"x\", 3)\n            .attr(\"y\", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\n            .attr(\"fill-opacity\", (d, i, nodes) => i === nodes.length - 1 ? 0.7 : null)\n            .text(d => d);\n\n        leaf.append(\"title\")\n            .text(group.name);\n\n        function layout(index) {\n          const k = Math.sqrt(root.sum(d => d.values[index]).value / max);\n          const x = (1 - k) / 2 * width;\n          const y = (1 - k) / 2 * height;\n          return treemap.size([width * k, height * k])(root)\n            .each(d => (d.x0 += x, d.x1 += x, d.y0 += y, d.y1 += y))\n            .leaves();\n        }\n\n  return Object.assign(svg.node(), {\n    update(index) {\n      box.transition()\n          .duration(duration)\n          .attr(\"opacity\", ({i}) => i >= index ? 1 : 0);\n\n      leaf.data(layout(index)).transition()\n          .duration(duration)\n          .ease(d3.easeLinear)\n          .attr(\"transform\", d => `translate(${d.x0},${d.y0})`)\n          .call(leaf => leaf.select(\"rect\")\n              .attr(\"width\", d => d.x1 - d.x0)\n              .attr(\"height\", d => d.y1 - d.y0))\n          .call(leaf => leaf.select(\"text tspan:last-child\")\n              .tween(\"text\", function(d) {\n                const i = d3.interpolate(parseNumber(this.textContent), d.value);\n                return function(t) { this.textContent = formatNumber(i(t)); };\n              }));\n    }\n  });\n\n    }\n\n  },\n  mounted: function () {\n\n    if (!this.$store.state.htmlMapData) {\n      var promises = []\n      promises.push(d3.csv('Data_for_line_chart.csv'))\n      promises.push(d3.csv('us-region.csv'))\n      promises.push(d3.csv('Data_for_treemap.csv'))\n      Promise.all(promises).then(values => {\n        this.rawData = values\n        this.lineData = values[0]\n        this.region = values[1]\n        this.treemapData = values[2]\n        this.$store.commit('htmlMapData', this.rawData);\n        //this.chart();\n        this.buildLineChart();\n        this.buildTreemap();\n      })\n    } else {\n      this.rawData = this.$store.state.htmlMapData;\n      this.lineData = this.rawData[0]\n      this.region = this.rawData[1]\n      this.treemapData = this.rawData[2]\n      this.chart();\n      this.buildLineChart();\n      this.buildTreemap();\n    }\n\n    }\n  }\n\n</script>\n\n<style>\n.title{\n  font-size: 24px;\n\n}\n\n</style>\n\n/*reference:\nOverall:\nhttps://observablehq.com/@hydrosquall/d3-tutorial-interactivity-animated-transitions\n\nLine Plot:\nhttps://www.d3-graph-gallery.com/graph/line_several_group.html\n\nMouseOver:\nhttp://bl.ocks.org/WilliamQLiu/76ae20060e19bf42d774\nhttps://codepen.io/zakariachowdhury/pen/JEmjwq\n\nAnimation:\nhttps://bl.ocks.org/phvaillant/53b90038b9c5ac5f6b817a4f63fbc2af\nhttp://bl.ocks.org/atmccann/8966400\n\n*/"]}]}