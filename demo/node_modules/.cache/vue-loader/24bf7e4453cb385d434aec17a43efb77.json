{"remainingRequest":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/src/views/Dashboard.vue?vue&type=template&id=22ba47ca&","dependencies":[{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/src/views/Dashboard.vue","mtime":1638575349672},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/cache-loader/dist/cjs.js","mtime":1637278779191},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1637278782398},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/cache-loader/dist/cjs.js","mtime":1637278779191},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/index.js","mtime":1637278782397}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygKICAgICJkaXYiLAogICAgeyBzdGF0aWNDbGFzczogImFib3V0IiB9LAogICAgWwogICAgICBfYygKICAgICAgICAiYi10YWJzIiwKICAgICAgICB7IGF0dHJzOiB7ICJjb250ZW50LWNsYXNzIjogIm10LTMiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItdGFiIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0aXRsZTogIkFuYWx5c2lzIG9uIENhcnJpZXJzIiwgYWN0aXZlOiAiIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiYi10b2dnbGUiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtYi10b2dnbGUuY29sbGFwc2UtMiIsCiAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllcnM6IHsgImNvbGxhcHNlLTIiOiB0cnVlIH0sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtLTEiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkluc3RydWN0aW9uIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiYi10b2dnbGUiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtYi10b2dnbGUiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJjb2xsYXBzZS0xIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInY29sbGFwc2UtMSciLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibS0xIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJFeHBsYW5hdGlvbiIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jb2xsYXBzZSIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHZpc2libGU6ICIiLCBpZDogImNvbGxhcHNlLTIiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImItY2FyZCIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIFRoZSBMaW5lIGNoYXJ0IHNob3dzIHRoZSBudW1iZXIgb2YgZGVsYXllZCBmbGlnaHRzIG9uIGVhY2ggZGF5IGluIEF1Z3VzdCAyMDIwLiAiCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIEl0J2xsIHNob3cgdGhlIGNhcnJpZXIgbmFtZSB3aGVuIGhvdmVyZWQgb3ZlciBvbiBsaW5lcy4gIgogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgJyBXaGVuICJTaG93IEd1aWRlbGluZSAmIEN1cnRhaW4iIGlzIGNoZWNrZWQgZHVyaW5nIHRoZSBpbml0aWFsIGFuaW1hdGlvbiwgJwogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgdGhlIHByb2dyZXNzIG9mIGxpbmUgZHJhd2luZyB3aWxsIHNob3cuICIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEZvciBleHBsYW5hdGlvbiBvZiB0aGlzIHBhZ2UsIHBsZWFzZSBjbGljayB0aGUgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJFeHBsYW5hdGlvbiIpXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgYnV0dG9uICIpLAogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNvbGxhcHNlIiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJjb2xsYXBzZS0xIiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBUaHJvdWdob3V0IHRpbWUsIENhcnJpZXIgQUEgaGFzIHRoZSBtb3N0IGRlbGF5ZWQgZmxpZ2h0IGNvdW50LCBhbmQgQ2FycmllciBIQSBoYXMgdGhlIGxlYXN0LiAiCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIEhvd2V2ZXIsIG1ham9yIGNhcnJpZXJzIGRvIGhhdmUgbW9yZSBmbGlnaHRzIG9uIGVhY2ggZGF5IHRvIGJlZ2luIHdpdGgsIgogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiB3aGljaCBkaXJlY3RseSBpbmNyZWFzZXMgdGhlIGRlbGF5ZWQgZmxpZ2h0IGNvdW50LiIKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgVGhpcyBwaGVub21lbm9uIGNhbiBiZSBvYnNlcnZlZCBieSB0aGUgZ2FwIChiZXR3ZWVuIDIwMH4zMDAgaW4geS1heGlzKSBpbiB0aGUgbGluZSBjaGFydCBiZXR3ZWVuIGNhcnJpZXJzLCAiCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIHdoZXJlIHRoZSA0IG1ham9yIGNhcnJpZXJzIEFBLCBVQSwgV04sIGFuZCBETCBhcmUgYWJvdmUgdGhlIGdhcCB3aGlsZSB0aGUgcmVzdCBpcyBiZWxvdy4gIgogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJoMSIsIFtfdm0uX3YoIldoaWNoIGNhcnJpZXJzIGhhdmUgbW9yZSBkZWxheT8iKV0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIkludGVyYWN0aXZlICYgQW5pbWF0ZWQgTGluZSBDaGFydDogTnVtYmVyIE9mIERlbGF5ZWQgRmxpZ2h0IENvdW50IEZvciBDYXJyaWVycyBUaHJvdWdoIFRpbWUiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF9jKCJsYWJlbCIsIHsgc3RhdGljQ2xhc3M6ICJndWlkZWxpbmUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIFNob3cgR3VpZGVsaW5lICYgQ3VydGFpbiAiKSwKICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImNoZWNrYm94IiwgaWQ6ICJzaG93X2d1aWRlbGluZSIgfSwKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF9jKCJzdmciLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyB3aWR0aDogIjEyMDAiLCBoZWlnaHQ6ICI2MDAiLCBpZDogImxpbmVfY2hhcnQiIH0sCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItdGFiIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0aXRsZTogIkFuYWx5c2lzIG9uIFN0YXRlcyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1idXR0b24iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImItdG9nZ2xlIiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWItdG9nZ2xlLmNvbGxhcHNlLTMiLAogICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzOiB7ICJjb2xsYXBzZS0zIjogdHJ1ZSB9LAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibS0xIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJJbnN0cnVjdGlvbiIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1idXR0b24iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImItdG9nZ2xlIiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWItdG9nZ2xlIiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiY29sbGFwc2UtNCIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2NvbGxhcHNlLTQnIiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm0tMSIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiRXhwbGFuYXRpb24iKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImItY29sbGFwc2UiLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyB2aXNpYmxlOiAiIiwgaWQ6ICJjb2xsYXBzZS0zIiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBUaGUgdHJlZW1hcCBzaG93cyB0aGUgY291bnQgb2YgZGVsYXllZCBmbGlnaHRzIG9uIGVhY2ggc3RhdGUgaW4gdGhlIFUuUy4uIgogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgJyBTZWxlY3QgIldlZWtkYXkiIHRvIHNlZSBkYXRhIG9uIGEgdHlwaWNhbCB3ZWVrZGF5LCBhbmQgIldlZWtlbmQiIGZvciBhIHR5cGljYWwgd2Vla2VuZCBkYXRhLiAnCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBNb3VzZSBvdmVyIGVhY2ggc3RhdGUgdG8gY2hlY2sgdGhlIGRldGFpbHMuICIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEZvciBleHBsYW5hdGlvbiBvZiB0aGlzIHBhZ2UsIHBsZWFzZSBjbGljayB0aGUgIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJFeHBsYW5hdGlvbiIpXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgYnV0dG9uICIpLAogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNvbGxhcHNlIiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJjb2xsYXBzZS00IiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBUaGUgc3RhdGVzIGFyZSBzb3J0ZWQgYW5kIGNvbG9yZWQgYnkgdGhlaXIgZ2VvZ3JhcGhpY2FsIGRpdmlzaW9uLiAiCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIFRoZSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvZiBlYWNoIHN0YXRlIGNhbiBiZSBmb3VuZCB3aGVuIHlvdSBwdXQgbW91c2Ugb24gZWFjaCBzdGF0ZSwiCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIGluY2x1ZGluZyB0aGVpciBnZW9ncmFwaGljYWwgZGl2aXNpb24sIHN0YXRlIG5hbWUsIGFuZCBleGFjdCBjb3VudCBvZiBkZWxheWVkIGZsaWdodHMuIgogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBPbmUga2V5IGFkdmFudGFnZSBvZiB0cmVlbWFwIGlzIHRoYXQgaXQgY2FuIHNob3cgdGhlIHByb3BvcnRpb24gb2YgZGVsYXllZCBmbGlnaHQgZGlyZWN0bHkgdGhyb3VnaCB0aGUgc2l6ZSBvZiBlYWNoIGNlbGwuIgogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgTGFyZ2VyIGNlbGxzIGNvbnRhaW4gbW9yZSBmbGlnaHQgZGVsYXlzLiAiKSwKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImgxIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiV2hhdCBpcyBwcm9wb3J0aW9uIG9mIHRoZSBkZWxheWVkIGZsaWdodCBjb3VudCBmb3IgZWFjaCBzdGF0ZT8iCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIiBUcmVlbWFwOiBOdW1iZXIgT2YgRGVsYXllZCBGbGlnaHQgQ291bnQgb2YgRWFjaCBTdGF0ZSB3aXRoIENvbXBhcnNpb24gb24gV2Vla2VuZCBhbmQgV2Vla2RheSIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxhYmVsIiwgeyBzdGF0aWNDbGFzczogInNlbGVjdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJyYWRpbyIsCiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGUiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAic3VtQnlTYXQiLAogICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6ICIiLAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBXZWVrZW5kIiksCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgwqDCoMKgwqAgIiksCiAgICAgICAgICAgICAgX2MoImxhYmVsIiwgeyBzdGF0aWNDbGFzczogInNlbGVjdGlvbiIgfSwgWwogICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAicmFkaW8iLCBuYW1lOiAibW9kZSIsIHZhbHVlOiAic3VtQnlXZWQiIH0sCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF92bS5fdigiIFdlZWtkYXkiKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygic3ZnIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgd2lkdGg6ICI5NjAiLCBoZWlnaHQ6ICI5NjAiLCBpZDogInRyZWVtYXAiIH0sCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItdGFiIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0aXRsZTogIkFuYWx5c2lzIG9uIFJlYXNvbnMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImItYnV0dG9uIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJiLXRvZ2dsZSIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1iLXRvZ2dsZS5jb2xsYXBzZS02IiwKICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVyczogeyAiY29sbGFwc2UtNiI6IHRydWUgfSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm0tMSIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiSW5zdHJ1Y3Rpb24iKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImItYnV0dG9uIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJiLXRvZ2dsZSIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1iLXRvZ2dsZSIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogImNvbGxhcHNlLTUiLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidjb2xsYXBzZS01JyIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtLTEiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkV4cGxhbmF0aW9uIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLWNvbGxhcHNlIiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgdmlzaWJsZTogIiIsIGlkOiAiY29sbGFwc2UtNiIgfSB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiYi1jYXJkIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgSG92ZXIgb3ZlciBlYWNoIHNlY3Rpb24gdG8gc2VlIHRoZSBwZXJjZW50YWdlIHZhbHVlIG9mIGVhY2ggZGVsYXkgcmVhc29uLiAiCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBGb3IgZXhwbGFuYXRpb24gb2YgdGhpcyBwYWdlLCBwbGVhc2UgY2xpY2sgdGhlICIpLAogICAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiRXhwbGFuYXRpb24iKV0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIGJ1dHRvbiAiKSwKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1jb2xsYXBzZSIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGlkOiAiY29sbGFwc2UtNSIgfSB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiYi1jYXJkIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgVGhlIG1vc3QgZnJlcXVlbnQgcmVhc29uIGZvciBmbGlnaHQgZGVsYXkgaXMgQWlyIENhcnJpZXIgRGVsYXkoMzglKSwgIgogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBmb2xsb3dlZCBieSBkZWxheXMgY2F1c2VkIGJ5IEFpcmNyYWZ0IEFycml2aW5nIExhdGUgKDM0JSkuICIKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIERlbGF5cyBjYXVzZWQgYnkgU2VjdXJpdHkgcmVhc29uIGlzIHRoZSBsZWFzdC4gIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBTdXJwcmlzaW5nbHksIGRlbGF5cyBjYXVzZWQgYnkgd2VhdGhlciBpcyBvbmx5IDUlLiAiCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImgxIiwgW192bS5fdigiV2hhdCBhcmUgdGhlIHJlYXNvbnMgYSBmbGlnaHQgZ2V0cyBkZWxheWVkPyIpXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgRG9udXQgQ2hhcnQ6IFBlcmNlbnRhZ2Ugb2YgRWFjaCBEZWxheWVkIFJlYXNvbnMiKSwKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfYygic3ZnIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgd2lkdGg6ICI2MDAiLCBoZWlnaHQ6ICI2MDAiLCBpZDogInBpZV9jaGFydCIgfSwKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}