{"remainingRequest":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/src/views/Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/src/views/Map.vue","mtime":1638576025524},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/cache-loader/dist/cjs.js","mtime":1637278779191},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/babel-loader/lib/index.js","mtime":1637278778721},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/cache-loader/dist/cjs.js","mtime":1637278779191},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/index.js","mtime":1637278782397}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGQzIGZyb20gImQzIgppbXBvcnQgKiBhcyB0b3BvanNvbiBmcm9tICd0b3BvanNvbicKaW1wb3J0IE1hcGJveCBmcm9tICJtYXBib3gtZ2wiOwppbXBvcnQgKiBhcyB0dXJmIGZyb20gIkB0dXJmL3R1cmYiOwovLyBpbXBvcnQgeyBNZ2xNYXAgfSBmcm9tICJ2dWUtbWFwYm94IjsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAndXNfbWFwJywKICBkYXRhOiBmdW5jdGlvbiAoKSB7CgogICAgcmV0dXJuIHsKICAgICAgbWFwRGF0YTogbnVsbCwKICAgICAgZmxpZ2h0c0RhdGE6IG51bGwsCiAgICAgIHJhd0RhdGE6IG51bGwsCiAgICAgIGFpcnBvcnRfZ2VvOiBudWxsLAogICAgICBjdXJyX2FpcnBvcnQ6IG51bGwsCiAgICAgIGRhdGVWYWx1ZTogJzIwMjEtMDgtMDEnLAogICAgICBtaW46ICcyMDIxLTA4LTAxJywKICAgICAgbWF4OiAnMjAyMS0wOC0zMScsCiAgICAgIHNlbGVjdGVkOiAnbnVsbCcsCiAgICAgIG9wdGlvbnM6IFsKICAgICAgICB7IHZhbHVlOiBudWxsLHRleHQ6ICdQbGVhc2Ugc2VsZWN0IGFuIGFpcnBvcnQnfSwKICAgICAgICAnQUJRJywnQU5DJywnQVRMJywnQkRMJywnQkhNJywnQk5BJywnQk9JJywnQk9TJywnQlRWJywnQldJJywnQlpOJywnQ0hTJywnQ0xFJywnQ0xUJywnQ1JXJywnQ1ZHJywnRENBJywnREVOJywnREZXJywnRFNNJywnRFRXJywKICAgICAgICAnRVdSJywnRkFSJywnRlNEJywnR1VNJywnSE5MJywnSUNUJywnSUxHJywnSU5EJywnSkFDJywnSkFOJywnSkZLJywnTEFTJywnTEFYJywnTElUJywnTUNPJywnTUhUJywnTUtFJywnTVNQJywnTVNZJywnT0tDJywnT01BJywKICAgICAgICAnT1JEJywnUERYJywnUEhMJywnUEhYJywnUFZEJywnUFdNJywnU0VBJywnU0pVJywnU0xDJywnU1RMJywnU1RUJ10sCiAgICAgIHJvdXRlczogewogICAgICAgICd0eXBlJzogJ0ZlYXR1cmVDb2xsZWN0aW9uJywKICAgICAgICAnZmVhdHVyZXMnOiBbXQogICAgICB9LAogICAgICBtYXA6IG51bGwKICAgIH0KICB9LCAKICB3YXRjaDogewogICAgc2VsZWN0ZWQoKSB7CiAgICAgIGlmICh0aGlzLnNlbGVjdGVkICE9IG51bGwpIHsKICAgICAgICB0aGlzLnVwZGF0ZVJvdXRlKCkKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZHJhd1BhdGgoc3RhdGUpIHsKICAgICAgdmFyIHN0YXRlRGF0YSA9IHRoaXMuZmxpZ2h0c0RhdGEuZmlsdGVyKGQgPT4gZC5PUklHSU5fU1RBVEVfTk0gPT0gc3RhdGUgJiYgZC5GTF9EQVRFID09IHRoaXMuZGF0ZVZhbHVlKQogICAgICB2YXIgbG9jYWxfYWlycG9ydCA9IHN0YXRlRGF0YVswXS5PUklHSU4KICAgICAgY29uc3QgY29sb3JtYXAgPSBuZXcgTWFwKCk7CiAgICAgIGNvbG9ybWFwLnNldCgnY2FycmllcicsICcjN2IzMjk0Jyk7ICAgCiAgICAgIGNvbG9ybWFwLnNldCgnd2VhdGhlcicsICcjYzJhNWNmJyk7IAogICAgICBjb2xvcm1hcC5zZXQoJ25hcycsICcjZjdmN2Y3Jyk7IAogICAgICBjb2xvcm1hcC5zZXQoJ3NlYycsICcjYTZkYmEwJyk7IAogICAgICBjb2xvcm1hcC5zZXQoJ2FpcmNyYWZ0JywgJyMwMDg4MzcnKTsgCiAgICAgIGlmICh0aGlzLmN1cnJfYWlycG9ydCA9PSBudWxsKXsKICAgICAgICB0aGlzLmN1cnJfYWlycG9ydCA9IGxvY2FsX2FpcnBvcnQKICAgICAgICB2YXIgbGluayA9IFtdCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZURhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHZhciBmcm9tID0gc3RhdGVEYXRhW2ldLk9SSUdJTgogICAgICAgICAgdmFyIHRvID0gc3RhdGVEYXRhW2ldLkRFU1QKICAgICAgICAgIC8vIHZhciBmcm9tX2NpdHkgPSBzdGF0ZURhdGFbaV0uT1JJR0lOX0NJVFlfTkFNRQogICAgICAgICAgLy8gdmFyIHRvX2NpdHkgPSBzdGF0ZURhdGFbaV0uREVTVF9DSVRZX05BTUUKICAgICAgICAgIHZhciBkZWxfdCA9IHN0YXRlRGF0YVtpXS5BUlJfREVMQVkKICAgICAgICAgIHZhciBjYXJyaWVyID0gc3RhdGVEYXRhW2ldLkNBUlJJRVJfREVMQVkKICAgICAgICAgIHZhciB3ZWF0aGVyID0gc3RhdGVEYXRhW2ldLldFQVRIRVJfREVMQVkKICAgICAgICAgIHZhciBuYXMgPSBzdGF0ZURhdGFbaV0uTkFTX0RFTEFZCiAgICAgICAgICB2YXIgc2VjID0gc3RhdGVEYXRhW2ldLlNFQ1VSSVRZX0RFTEFZCiAgICAgICAgICB2YXIgYWlyY3JhZnQgPSBzdGF0ZURhdGFbaV0uTEFURV9BSVJDUkFGVF9ERUxBWQogICAgICAgICAgdmFyIGZyb21fbG5nID0gdGhpcy5haXJwb3J0X2dlby5maWx0ZXIoZCA9PiBkLmxvY2FsX2NvZGUgPT0gZnJvbSlbMF0ubG9uZ2l0dWRlX2RlZwogICAgICAgICAgdmFyIGZyb21fbGF0ID0gdGhpcy5haXJwb3J0X2dlby5maWx0ZXIoZCA9PiBkLmxvY2FsX2NvZGUgPT0gZnJvbSlbMF0ubGF0aXR1ZGVfZGVnCiAgICAgICAgICB2YXIgdG9fbG5nID0gdGhpcy5haXJwb3J0X2dlby5maWx0ZXIoZCA9PiBkLmxvY2FsX2NvZGUgPT0gdG8pWzBdLmxvbmdpdHVkZV9kZWcKICAgICAgICAgIHZhciB0b19sYXQgPSB0aGlzLmFpcnBvcnRfZ2VvLmZpbHRlcihkID0+IGQubG9jYWxfY29kZSA9PSB0bylbMF0ubGF0aXR1ZGVfZGVnCiAgICAgICAgICB2YXIgcmVhc29uID0gbnVsbDsKICAgICAgICAgIHZhciBtYXggPSAwCiAgICAgICAgICBpZiAoY2FycmllciA+IG1heCkge3JlYXNvbiA9ICdjYXJyaWVyJzsgbWF4ID0gY2Fycmllcn0KICAgICAgICAgIGlmICh3ZWF0aGVyID4gbWF4KSB7cmVhc29uID0gJ3dlYXRoZXInOyBtYXggPSB3ZWF0aGVyfQogICAgICAgICAgaWYgKG5hcyA+IG1heCkge3JlYXNvbiA9ICduYXMnOyBtYXggPSBuYXN9CiAgICAgICAgICBpZiAoc2VjID4gbWF4KSB7cmVhc29uID0gJ3NlYyc7IG1heCA9IHNlY30KICAgICAgICAgIGlmIChhaXJjcmFmdCA+IG1heCkge3JlYXNvbiA9ICdhaXJjcmFmdCc7IG1heCA9IGFpcmNyYWZ0fQogICAgICAgICAgbGluay5wdXNoKHsKICAgICAgICAgICAgdHlwZTogIkxpbmVTdHJpbmciLAogICAgICAgICAgICBjb29yZGluYXRlczogW1tmcm9tX2xuZywgZnJvbV9sYXRdLFt0b19sbmcsIHRvX2xhdF1dLAogICAgICAgICAgICBmcm9tOiBmcm9tLAogICAgICAgICAgICB0bzogdG8sCiAgICAgICAgICAgIGRlbF90OiBkZWxfdCwKICAgICAgICAgICAgY2FycmllcjogY2FycmllciwKICAgICAgICAgICAgd2VhdGhlcjogd2VhdGhlciwKICAgICAgICAgICAgbmFzOiBuYXMsCiAgICAgICAgICAgIHNlYzogc2VjLAogICAgICAgICAgICBhaXJjcmFmdDogYWlyY3JhZnQsCiAgICAgICAgICAgIGNvbG9yOiBjb2xvcm1hcC5nZXQocmVhc29uKQoKICAgICAgICAgIH0pCiAgICAgICAgfQogICAgICAgIHZhciBwcm9qZWN0aW9uID0gZDMuZ2VvQWxiZXJzVXNhKCkuc2NhbGUoMTMwMCkudHJhbnNsYXRlKFs0ODcuNSwgMzA1XSk7CiAgICAgICAgdmFyIHBhdGggPSBkMy5nZW9QYXRoKCkucHJvamVjdGlvbihwcm9qZWN0aW9uKTsKICAgICAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KCcjdXNfbWFwJykKICAgICAgICBzdmcuc2VsZWN0QWxsKCJteVBhdGgiKQogICAgICAgICAgLmRhdGEobGluaykKICAgICAgICAgIC5lbnRlcigpCiAgICAgICAgICAuYXBwZW5kKCJwYXRoIikKICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgYCR7dGhpcy5jdXJyX2FpcnBvcnR9YCkKICAgICAgICAgICAgLmF0dHIoJ2Rpc3BsYXknLCAndmlzaWJsZScpCiAgICAgICAgICAgIC5hdHRyKCJkIiwgZnVuY3Rpb24oZCl7IHJldHVybiBwYXRoKGQpfSkKICAgICAgICAgICAgLnN0eWxlKCJmaWxsIiwgIm5vbmUiKQogICAgICAgICAgICAuc3R5bGUoInN0cm9rZSIsIGZ1bmN0aW9uKGQpeyByZXR1cm4gZC5jb2xvcn0pCiAgICAgICAgICAgIC5zdHlsZSgic3Ryb2tlLXdpZHRoIiwgMikKICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpCiAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCA4KQogICAgICAgICAgICB9KQogICAgICAgICAgICAub24oJ21vdXNlb3V0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKQogICAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCAyKQogICAgICAgICAgICB9KQogICAgICAgICAgICAuYXBwZW5kKCd0aXRsZScpCiAgICAgICAgICAgIC50ZXh0KGQgPT4gYEZyb206ICR7ZC5mcm9tfSBcblRvOiAke2QudG99IFxuRGVsYXllZCBUaW1lOiAke2QuZGVsX3R9IFxuQ2FycmllcjogJHtkLmNhcnJpZXJ9IFxuV2VhdGhlcjogJHtkLndlYXRoZXJ9IFxuTkFTOiAke2QubmFzfSBcbiBTZWN1cml0eTogJHtkLnNlY30gXG5BaXJjcmFmdDogJHtkLmFpcmNyYWZ0fWApCiAgICAgICAgICAgIAogICAgICB9IGVsc2UgaWYgKHRoaXMuY3Vycl9haXJwb3J0ID09IGxvY2FsX2FpcnBvcnQpIHsKICAgICAgICBkMy5zZWxlY3RBbGwoYC4ke3RoaXMuY3Vycl9haXJwb3J0fWApCiAgICAgICAgICAuYXR0cignZGlzcGxheScsICdub25lJykKICAgICAgICB0aGlzLmN1cnJfYWlycG9ydCA9IG51bGwKICAgICAgfSBlbHNlIHsKICAgICAgICBhbGVydCgnY2xpY2sgdGhlIHN0YXRlIHNob3duIGZpcnN0JykKICAgICAgfQogICAgICAKICAgIH0sCiAgICBjcmVhdGVkKCl7d2luZG93LmRyYXdQYXRoID10aGlzLmRyYXdQYXRoO30sCiAgICBidWlsZE1hcCAoKSB7CiAgICAgIC8vIHZhciBkcmF3UGF0aCA9IHRoaXMuZHJhd1BhdGgoKQogICAgICBjb25zdCBjb2xvcm1hcCA9IG5ldyBNYXAoKTsKICAgICAgY29sb3JtYXAuc2V0KCdjYXJyaWVyJywgJyM3YjMyOTQnKTsgICAKICAgICAgY29sb3JtYXAuc2V0KCd3ZWF0aGVyJywgJyNjMmE1Y2YnKTsgCiAgICAgIGNvbG9ybWFwLnNldCgnbmFzJywgJyNmN2Y3ZjcnKTsgCiAgICAgIGNvbG9ybWFwLnNldCgnc2VjJywgJyNhNmRiYTAnKTsgCiAgICAgIGNvbG9ybWFwLnNldCgnYWlyY3JhZnQnLCAnIzAwODgzNycpOyAKICAgICAgdmFyIGRhdGEgPSBbJ2NhcnJpZXInLCAnd2VhdGhlcicsICduYXMnLCAnc2VjJywgJ2FyY3JhZnQnXQogICAgICBmdW5jdGlvbiBsZWdlbmQoewogICAgICAgIHRpdGxlLAogICAgICAgIHdpZHRoID0gMzIwLAogICAgICAgIGhlaWdodCA9IDEwMCwKICAgICAgICBtYXJnaW5Ub3AgPSAxOCwKCQkJCS8vIG1hcmdpblJpZ2h0ID0gMCwKCQkJCW1hcmdpbkJvdHRvbSA9IDE2LAoJCQkJLy8gbWFyZ2luTGVmdCA9IDAKICAgICAgfSkgewogICAgICAgIGNvbnN0IHN2ZyA9IGQzLmNyZWF0ZSgic3ZnIikKCQkJCQkuYXR0cigid2lkdGgiLCB3aWR0aCkKCQkJCQkuYXR0cigiaGVpZ2h0IiwgaGVpZ2h0KQoJCQkJCS5hdHRyKCJ2aWV3Qm94IiwgWzAsIDAsIHdpZHRoLCBoZWlnaHRdKQoJCQkJCS5zdHlsZSgib3ZlcmZsb3ciLCAidmlzaWJsZSIpCgkJCQkJLnN0eWxlKCJkaXNwbGF5IiwgImJsb2NrIik7CiAgICAgICAgc3ZnLnNlbGVjdEFsbCgiZG90cyIpCiAgICAgICAgICAuZGF0YShkYXRhKQogICAgICAgICAgLmVudGVyKCkKICAgICAgICAgIC5hcHBlbmQoJ3JlY3QnKQogICAgICAgICAgICAuYXR0cigieCIsIDApCiAgICAgICAgICAgIC5hdHRyKCJ5IiwgZnVuY3Rpb24oZCxpKXsgcmV0dXJuIDIwICsgaSooMTArNSl9KQogICAgICAgICAgICAuYXR0cigid2lkdGgiLCAxMCkKICAgICAgICAgICAgLmF0dHIoImhlaWdodCIsIDEwKQogICAgICAgICAgICAuc3R5bGUoImZpbGwiLCBmdW5jdGlvbihkKXsgcmV0dXJuIGNvbG9ybWFwLmdldChkKX0pCiAgICAgICAgc3ZnLnNlbGVjdEFsbCgibXlsYWJlbHMiKQogICAgICAgICAgLmRhdGEoZGF0YSkKICAgICAgICAgIC5lbnRlcigpCiAgICAgICAgICAuYXBwZW5kKCJ0ZXh0IikKICAgICAgICAgICAgLmF0dHIoIngiLCAxMCoxLjIpCiAgICAgICAgICAgIC5hdHRyKCJ5IiwgZnVuY3Rpb24oZCxpKXsgcmV0dXJuIDIwICsgaSooMTArNSkgKyAoMTAvMil9KQogICAgICAgICAgICAvLyAuc3R5bGUoImZpbGwiLCBmdW5jdGlvbihkKXsgcmV0dXJuIGNvbG9yKGQpfSkKICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCl7IHJldHVybiBkfSkKICAgICAgICAgICAgLmF0dHIoInRleHQtYW5jaG9yIiwgImxlZnQiKQogICAgICAgICAgICAuc3R5bGUoImFsaWdubWVudC1iYXNlbGluZSIsICJtaWRkbGUiKQogICAgICAgIHN2Zy5hcHBlbmQoJ2cnKQogICAgICAgICAgLmF0dHIoInRyYW5zZm9ybSIsIGB0cmFuc2xhdGUoMCwgJHtoZWlnaHQgLSBtYXJnaW5Cb3R0b219KWApCiAgICAgICAgICAuY2FsbChnID0+IGcuYXBwZW5kKCJ0ZXh0IikKCQkJCQkJLmF0dHIoInkiLCBtYXJnaW5Ub3AgKyBtYXJnaW5Cb3R0b20gLSBoZWlnaHQgLSA2KQoJCQkJCQkuYXR0cigiZmlsbCIsICJjdXJyZW50Q29sb3IiKQoJCQkJCQkuYXR0cigidGV4dC1hbmNob3IiLCAic3RhcnQiKQoJCQkJCQkuYXR0cigiZm9udC13ZWlnaHQiLCAiYm9sZCIpCgkJCQkJCS50ZXh0KHRpdGxlKSk7CiAgICAgICAgcmV0dXJuIHN2Zy5ub2RlKCkKICAgICAgfQogICAgICB2YXIgc3ZnID0gZDMuc2VsZWN0KCcjdXNfbWFwJykKICAgICAgICAuYXR0cigndmlld0JveCcsIFswLCAwLCA5NzUsIDYxMF0pCiAgICAgIHZhciBwYXRoID0gZDMuZ2VvUGF0aCgpOwogICAgICAKCQkJCXN2Zy5hcHBlbmQoJ2cnKQoJCQkJCS5hdHRyKCdjbGFzcycsICdzdGF0ZXMnKQoJCQkJCS5zZWxlY3RBbGwoJ3BhdGgnKQoJCQkJCS5kYXRhKHRvcG9qc29uLmZlYXR1cmUodGhpcy5tYXBEYXRhLCB0aGlzLm1hcERhdGEub2JqZWN0cy5zdGF0ZXMpLmZlYXR1cmVzKSAgCgkJCQkJLmVudGVyKCkKCQkJCQkuYXBwZW5kKCdwYXRoJykKICAgICAgICAgIC5hdHRyKCdvbmNsaWNrJywgZCA9PiAoYGRyYXdQYXRoKCcke2QucHJvcGVydGllcy5uYW1lfScpYCkpCgkJCQkJLmF0dHIoJ2QnLCBwYXRoKQogICAgICAgIAoJCQkKCQkJCXN2Zy5hcHBlbmQoJ3BhdGgnKSAgLy/wn46SIGV4cGxhaW46CgkJCQkJLmF0dHIoJ2NsYXNzJywgJ3N0YXRlLWJvcmRlcnMnKQoJCQkJCS5hdHRyKCdkJywgcGF0aCh0b3BvanNvbi5tZXNoKHRoaXMubWFwRGF0YSwgdGhpcy5tYXBEYXRhLm9iamVjdHMuc3RhdGVzLCAoYSwgYikgPT4gYSAhPT0gYikpKTsgCgogICAgICAgIHN2Zy5hcHBlbmQoImciKQoJCQkJCS5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKDYxMCwyMCkiKQoJCQkJCS5hcHBlbmQoKCkgPT4gbGVnZW5kKHt0aXRsZTogJ0RlbGF5ZWQgUmVhc29uJywgd2lkdGg6IDI2MCB9KSk7CiAgICB9LAogICAgYnVpbGRNYXBib3ggKCkgewogICAgICBNYXBib3guYWNjZXNzVG9rZW4gPSAncGsuZXlKMUlqb2lkMnh2ZFNJc0ltRWlPaUpqYTNZMmNHRXdNbTh4Yld0c01tNXVibU50ZDJ0bE5uRTBJbjAuV3k3d09WTjUtTko2WWU4a3pDVmNCZyc7CiAgICAgIGNvbnN0IG1hcCA9IG5ldyBNYXBib3guTWFwKHsKICAgICAgICBjb250YWluZXI6ICdtYmZtJywgLy8gY29udGFpbmVyIElECiAgICAgICAgc3R5bGU6ICdtYXBib3g6Ly9zdHlsZXMvbWFwYm94L2RhcmstdjEwJywgLy8gc3R5bGUgVVJMCiAgICAgICAgY2VudGVyOiBbLTk4LjU4MzMzMywzOS44MzMzMzNdLCAvLyBzdGFydGluZyBwb3NpdGlvbiBbbG5nLCBsYXRdCiAgICAgICAgem9vbTogMy41IC8vIHN0YXJ0aW5nIHpvb20KICAgICAgfSk7CgogICAgICBjb25zdCByb3V0ZSA9IHsKICAgICAgICAndHlwZSc6ICdGZWF0dXJlQ29sbGVjdGlvbicsCiAgICAgICAgJ2ZlYXR1cmVzJzogW10KICAgICAgfQogICAgICBtYXAub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7IAogICAgICAgIG1hcC5yZXNpemUoKQogICAgICAgIG1hcC5hZGRTb3VyY2UoYHJvdXRlYCwgewogICAgICAgICAgJ3R5cGUnOiAnZ2VvanNvbicsCiAgICAgICAgICAnZGF0YSc6IHJvdXRlCiAgICAgICAgfSkKICAgICAgICBtYXAuYWRkTGF5ZXIoewogICAgICAgICAgJ2lkJzogYHJvdXRlYCwKICAgICAgICAgICdzb3VyY2UnOiBgcm91dGVgLAogICAgICAgICAgJ3R5cGUnOiAnbGluZScsCiAgICAgICAgICAncGFpbnQnOiB7CiAgICAgICAgICAgICdsaW5lLXdpZHRoJzogMiwKICAgICAgICAgICAgJ2xpbmUtY29sb3InOiAnIzAwN2NiZicKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICB9KQogICAgICB0aGlzLm1hcCA9IG1hcAogICAgfSwKICAgIHVwZGF0ZVJvdXRlICgpIHsKICAgICAgdGhpcy5yb3V0ZXMgPSB7CiAgICAgICAgJ3R5cGUnOiAnRmVhdHVyZUNvbGxlY3Rpb24nLAogICAgICAgICdmZWF0dXJlcyc6IFtdCiAgICAgICAgfQogICAgICBpZiAodGhpcy5zZWxlY3RlZCAhPSBudWxsKSB7CiAgICAgICAgdmFyIHN0YXRlRGF0YSA9IHRoaXMuZmxpZ2h0c0RhdGEuZmlsdGVyKGQgPT4gZC5PUklHSU4gPT0gdGhpcy5zZWxlY3RlZCAmJiBkLkZMX0RBVEUgPT0gdGhpcy5kYXRlVmFsdWUpCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZURhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIHZhciBmcm9tID0gc3RhdGVEYXRhW2ldLk9SSUdJTgogICAgICAgICAgdmFyIHRvID0gc3RhdGVEYXRhW2ldLkRFU1QKICAgICAgICAgIHZhciBjTmFtZSA9IHN0YXRlRGF0YVtpXS5NS1RfVU5JUVVFX0NBUlJJRVIKICAgICAgICAgIHZhciBmTnVtID0gc3RhdGVEYXRhW2ldLk1LVF9DQVJSSUVSX0ZMX05VTQogICAgICAgICAgdmFyIGRlbF90ID0gc3RhdGVEYXRhW2ldLkFSUl9ERUxBWQogICAgICAgICAgdmFyIGRlbF9yZWFzb24gPSBbXQogICAgICAgICAgaWYgKHN0YXRlRGF0YVtpXS5DQVJSSUVSX0RFTEFZICE9IDApIHsKICAgICAgICAgICAgZGVsX3JlYXNvbi5wdXNoKGBDYXJyaWVyOiAke3N0YXRlRGF0YVtpXS5DQVJSSUVSX0RFTEFZfSBtaW5zYCkKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzdGF0ZURhdGFbaV0uV0VBVEhFUl9ERUxBWSAhPSAwKSB7CiAgICAgICAgICAgIGRlbF9yZWFzb24ucHVzaChgV2VhdGhlcjogJHtzdGF0ZURhdGFbaV0uV0VBVEhFUl9ERUxBWX0gbWluc2ApCiAgICAgICAgICB9CiAgICAgICAgICBpZiAoc3RhdGVEYXRhW2ldLk5BU19ERUxBWSAhPSAwKSB7CiAgICAgICAgICAgIGRlbF9yZWFzb24ucHVzaChgTkFTOiAke3N0YXRlRGF0YVtpXS5OQVNfREVMQVl9IG1pbnNgKQogICAgICAgICAgfQogICAgICAgICAgaWYgKHN0YXRlRGF0YVtpXS5TRUNVUklUWV9ERUxBWSAhPSAwKSB7CiAgICAgICAgICAgIGRlbF9yZWFzb24ucHVzaChgU2VjdXJpdHk6ICR7c3RhdGVEYXRhW2ldLlNFQ1VSSVRZX0RFTEFZfSBtaW5zYCkKICAgICAgICAgIH0KICAgICAgICAgIGlmIChzdGF0ZURhdGFbaV0uTEFURV9BSVJDUkFGVF9ERUxBWSAhPSAwKSB7CiAgICAgICAgICAgIGRlbF9yZWFzb24ucHVzaChgQWlyY3JhZnQ6ICR7c3RhdGVEYXRhW2ldLkxBVEVfQUlSQ1JBRlRfREVMQVl9IG1pbnNgKQogICAgICAgICAgfQogICAgICAgICAgLy8gdmFyIGNhcnJpZXIgPSBzdGF0ZURhdGFbaV0uQ0FSUklFUl9ERUxBWQogICAgICAgICAgLy8gdmFyIHdlYXRoZXIgPSBzdGF0ZURhdGFbaV0uV0VBVEhFUl9ERUxBWQogICAgICAgICAgLy8gdmFyIG5hcyA9IHN0YXRlRGF0YVtpXS5OQVNfREVMQVkKICAgICAgICAgIC8vIHZhciBzZWMgPSBzdGF0ZURhdGFbaV0uU0VDVVJJVFlfREVMQVkKICAgICAgICAgIC8vIHZhciBhaXJjcmFmdCA9IHN0YXRlRGF0YVtpXS5MQVRFX0FJUkNSQUZUX0RFTEFZCiAgICAgICAgICB2YXIgZnJvbV9sbmcgPSB0aGlzLmFpcnBvcnRfZ2VvLmZpbHRlcihkID0+IGQubG9jYWxfY29kZSA9PSBmcm9tKVswXS5sb25naXR1ZGVfZGVnCiAgICAgICAgICB2YXIgZnJvbV9sYXQgPSB0aGlzLmFpcnBvcnRfZ2VvLmZpbHRlcihkID0+IGQubG9jYWxfY29kZSA9PSBmcm9tKVswXS5sYXRpdHVkZV9kZWcKICAgICAgICAgIHZhciB0b19sbmcgPSB0aGlzLmFpcnBvcnRfZ2VvLmZpbHRlcihkID0+IGQubG9jYWxfY29kZSA9PSB0bylbMF0ubG9uZ2l0dWRlX2RlZwogICAgICAgICAgdmFyIHRvX2xhdCA9IHRoaXMuYWlycG9ydF9nZW8uZmlsdGVyKGQgPT4gZC5sb2NhbF9jb2RlID09IHRvKVswXS5sYXRpdHVkZV9kZWcKICAgICAgICAgIC8vIGNvbnN0IGRlc3RpbmF0aW9uID0gWy03Ny4wMzIsIDM4LjkxM107CgogICAgICAgICAgLy8gQSBzaW1wbGUgbGluZSBmcm9tIG9yaWdpbiB0byBkZXN0aW5hdGlvbi4KICAgICAgICAgIHZhciBncmVhdENpcmNsZSA9IHR1cmYuZ3JlYXRDaXJjbGUoW2Zyb21fbG5nLCBmcm9tX2xhdF0sW3RvX2xuZywgdG9fbGF0XSwgewogICAgICAgICAgICBwcm9wZXJ0aWVzOiB7J2NOYW1lJzogY05hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAnZk51bSc6IGZOdW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAnZGVsX3QnOiBkZWxfdCwKICAgICAgICAgICAgICAgICAgICAgICAgICdkZWxfcic6IGRlbF9yZWFzb24uam9pbignLCAnKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgdGhpcy5yb3V0ZXMuZmVhdHVyZXMucHVzaChncmVhdENpcmNsZSkKICAgICAgICAgIAogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLm1hcC5nZXRTb3VyY2UoJ3JvdXRlJykuc2V0RGF0YSh0aGlzLnJvdXRlcyk7CiAgICAgIHRoaXMubWFwLm9uKCdjbGljaycsICdyb3V0ZScsIChkKSA9PiB7CiAgICAgICAgdmFyIHBhdGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGQnKTsKICAgICAgICBwYXRoLmlubmVySFRNTCA9IGA8ZGl2PkZsaWdodDogJHtkLmZlYXR1cmVzWzBdLnByb3BlcnRpZXMuY05hbWV9ICR7ZC5mZWF0dXJlc1swXS5wcm9wZXJ0aWVzLmZOdW19PC9kaXY+YCArIAogICAgICAgICAgICAgICAgICAgICAgICAgYDxkaXY+RGVsYXkgVGltZShtaW5zKTogJHtkLmZlYXR1cmVzWzBdLnByb3BlcnRpZXMuZGVsX3R9PC9kaXY+YCArCiAgICAgICAgICAgICAgICAgICAgICAgICBgPGRpdj5SZWFzb246ICR7ZC5mZWF0dXJlc1swXS5wcm9wZXJ0aWVzLmRlbF9yfTwvZGl2PmAKICAgICAgfSkKICAgICAgdGhpcy5tYXAub24oJ21vdXNlZW50ZXInLCAncm91dGUnLCAoKSA9PiB7CiAgICAgICAgdGhpcy5tYXAuZ2V0Q2FudmFzKCkuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInOwogICAgICAgIH0pOwogICAgICAgIAogICAgICAgIC8vIENoYW5nZSB0aGUgY3Vyc29yIGJhY2sgdG8gYSBwb2ludGVyCiAgICAgICAgLy8gd2hlbiBpdCBsZWF2ZXMgdGhlIHN0YXRlcyBsYXllci4KICAgICAgdGhpcy5tYXAub24oJ21vdXNlbGVhdmUnLCAncm91dGUnLCAoKSA9PiB7CiAgICAgICAgdGhpcy5tYXAuZ2V0Q2FudmFzKCkuc3R5bGUuY3Vyc29yID0gJyc7CiAgICAgICAgfSk7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIXRoaXMuJHN0b3JlLnN0YXRlLmh0bWxNYXBEYXRhKSB7CiAgICAgIHZhciBwcm9taXNlcyA9IFtdCiAgICAgIHByb21pc2VzLnB1c2goZDMuanNvbignc3RhdGVzLWFsYmVycy0xMG0uanNvbicpKQogICAgICBwcm9taXNlcy5wdXNoKGQzLmNzdignZmxpZ2h0cy5jc3YnKSkKICAgICAgcHJvbWlzZXMucHVzaChkMy5jc3YoJ2FpcnBvcnRfZ2VvLmNzdicpKQogICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbih2YWx1ZXMgPT4gewogICAgICAgIHRoaXMucmF3RGF0YSA9IHZhbHVlcwogICAgICAgIHRoaXMubWFwRGF0YSA9IHZhbHVlc1swXQogICAgICAgIHRoaXMuZmxpZ2h0c0RhdGEgPSB2YWx1ZXNbMV0KICAgICAgICB0aGlzLmFpcnBvcnRfZ2VvID0gdmFsdWVzWzJdCiAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdodG1sTWFwRGF0YScsIHRoaXMucmF3RGF0YSk7CiAgICAgICAgdGhpcy5jcmVhdGVkKCk7CiAgICAgICAgdGhpcy5idWlsZE1hcCgpOwogICAgICAgIHRoaXMuYnVpbGRNYXBib3goKTsKICAgICAgfSkKICAgICAgLy8gZDMuanNvbignc3RhdGVzLWFsYmVycy0xMG0uanNvbicpLnRoZW4oZGF0YSA9PiB7CiAgICAgIC8vICAgdGhpcy5tYXBEYXRhID0gZGF0YTsKICAgICAgLy8gICAvLyBjb25zb2xlLmxvZygnY2hhcnREYXRhIHNldCBmcm9tIGZpbGUnKTsKICAgICAgLy8gICAvLyBjb25zb2xlLmxvZygnY2hhcnREYXRhIGNvbnRhaW5zJywgdGhpcy5tYXBEYXRhKTsKICAgICAgLy8gICB0aGlzLiRzdG9yZS5jb21taXQoJ2h0bWxNYXBEYXRhJywgdGhpcy5tYXBEYXRhKTsKCiAgICAgIC8vICAgdGhpcy5idWlsZE1hcCgpOwogICAgICAvLyAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5yYXdEYXRhID0gdGhpcy4kc3RvcmUuc3RhdGUuaHRtbE1hcERhdGE7CiAgICAgIHRoaXMubWFwRGF0YSA9IHRoaXMucmF3RGF0YVswXQogICAgICB0aGlzLmZsaWdodHNEYXRhID0gdGhpcy5yYXdEYXRhWzFdCiAgICAgIHRoaXMuYWlycG9ydF9nZW8gPSB0aGlzLnJhd0RhdGFbMl0KICAgICAgLy8gY29uc29sZS5sb2coJ2NoYXJ0RGF0YSBzZXQgZnJvbSBzdG9yZScpOwogICAgICAvLyBjb25zb2xlLmxvZygnY2hhcnREYXRhIGNvbnRhaW5zJywgdGhpcy5tYXBEYXRhLmxlbmd0aCwgJ3Jvd3MnKTsKICAgICAgdGhpcy5jcmVhdGVkKCk7CiAgICAgIHRoaXMuYnVpbGRNYXAoKTsKICAgICAgdGhpcy5idWlsZE1hcGJveCgpCiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"Map.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"d3_map\">\n      <b-tabs content-class=\"mt-3\">\n        <b-tab title=\"Delayed Reason in Each State\" active>\n          <b-button v-b-toggle.collapse-2 class=\"m-1\">Instruction</b-button>\n\n          <!-- Using value -->\n          <b-button v-b-toggle=\"'collapse-1'\" class=\"m-1\">Explanation</b-button>\n\n          <!-- Element to collapse -->\n          <b-collapse visible id=\"collapse-2\">\n            <b-card>\n              On this page, you can check delayed flights in each state <br> \n              Select the date and click on the state which you want to check, <br>\n              the paths of flights will be shown <br>\n              Move your mouse over the path, you can check detailed delay information <br>\n              For explanation of this page, please click the <code>Explanation</code> button\n            </b-card>\n          </b-collapse>\n          <b-collapse id=\"collapse-1\">\n            <b-card>\n              This map is built with a D3 map. The legend indicates the causes of delay in different colors. <br>\n              The default date is August 1, 2021.\n              By clicking on a state, paths of all delayed flights in this state would be shown. <br>\n              The color represents the main cause of delayed(flights may have multiple causes of delay). <br>\n              Move the mouse over the path, you can see the detailed delay information. <br>\n              Before checking another state, you must click the shown one first. <br>\n            </b-card>\n          </b-collapse>\n          <div>\n            <label for=\"datepicker\">Choose a date</label>\n            <b-form-datepicker id=\"datepicker\" :min=\"min\" :max=\"max\" v-model=\"dateValue\" class=\"mb-2\" placeholder=\"Sunday, August 1, 2021\"></b-form-datepicker>\n          </div>\n          <svg id='us_map'></svg>\n        </b-tab>\n        <b-tab title=\"Detailed Delayed Flight\">\n          <b-button v-b-toggle.collapse-3 class=\"m-1\">Instruction</b-button>\n\n          <!-- Using value -->\n          <b-button v-b-toggle=\"'collapse-4'\" class=\"m-1\">Explanation</b-button>\n\n          <!-- Element to collapse -->\n          <b-collapse visible id=\"collapse-3\">\n            <b-card>\n              On this page, you can check delayed flights by selecting the airport <br> \n              Similarly pick up date and airport code <br>\n              Click on the path, details of the flight will be shown in the info box <br>\n              For explanation of this page, please click the <code>Explanation</code> button\n            </b-card>\n          </b-collapse>\n          <b-collapse id=\"collapse-4\">\n            <b-card>\n              This map is built with Mapbox. The infobox is where you would see the detailed information <br>\n              By clicking on a path, the detailed information will be shown. <br>\n              The detailed information contains carriers, flight number, and delayed causes <br>\n            </b-card>\n          </b-collapse>\n          <b-row>\n            <b-col>\n              <b-container>\n                <label for=\"datepicker1\">Choose a date</label>\n                <b-form-datepicker id=\"datepicker1\" :min=\"min\" :max=\"max\" v-model=\"dateValue\" class=\"mb-2\" placeholder=\"Sunday, August 1, 2021\"></b-form-datepicker>\n              </b-container>\n            </b-col>\n            <b-col>\n              <b-container>\n                <label for=\"aiportpicker\" >Choose Departure Airport</label>\n                <b-form-select id = \"airportpicker\" v-model=\"selected\" :options=\"options\" size='lg'></b-form-select>\n              </b-container>\n            </b-col>\n          </b-row>\n          <!-- <div id='mbfm' class=\"mapbox_container\"> -->\n            <!-- <div class='map-overlay' id='features'><h2>Building Capacity</h2><div id='pd'><p>Hover over a building!</p></div></div> -->\n            <!-- <div class='map-overlay' id='legend'></div> -->\n          <!-- </div> -->\n          <b-container id='mbfm' class=\"mapbox_container\">\n            <!-- Content here -->\n            <div id='features'><h4>Flight Delay Info</h4><div id='pd'><p>Click a path!</p></div></div>\n\n          </b-container>\n        </b-tab>\n      </b-tabs>\n    </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\"\nimport * as topojson from 'topojson'\nimport Mapbox from \"mapbox-gl\";\nimport * as turf from \"@turf/turf\";\n// import { MglMap } from \"vue-mapbox\";\n\nexport default {\n  name: 'us_map',\n  data: function () {\n\n    return {\n      mapData: null,\n      flightsData: null,\n      rawData: null,\n      airport_geo: null,\n      curr_airport: null,\n      dateValue: '2021-08-01',\n      min: '2021-08-01',\n      max: '2021-08-31',\n      selected: 'null',\n      options: [\n        { value: null,text: 'Please select an airport'},\n        'ABQ','ANC','ATL','BDL','BHM','BNA','BOI','BOS','BTV','BWI','BZN','CHS','CLE','CLT','CRW','CVG','DCA','DEN','DFW','DSM','DTW',\n        'EWR','FAR','FSD','GUM','HNL','ICT','ILG','IND','JAC','JAN','JFK','LAS','LAX','LIT','MCO','MHT','MKE','MSP','MSY','OKC','OMA',\n        'ORD','PDX','PHL','PHX','PVD','PWM','SEA','SJU','SLC','STL','STT'],\n      routes: {\n        'type': 'FeatureCollection',\n        'features': []\n      },\n      map: null\n    }\n  }, \n  watch: {\n    selected() {\n      if (this.selected != null) {\n        this.updateRoute()\n      }\n    }\n  },\n  methods: {\n    drawPath(state) {\n      var stateData = this.flightsData.filter(d => d.ORIGIN_STATE_NM == state && d.FL_DATE == this.dateValue)\n      var local_airport = stateData[0].ORIGIN\n      const colormap = new Map();\n      colormap.set('carrier', '#7b3294');   \n      colormap.set('weather', '#c2a5cf'); \n      colormap.set('nas', '#f7f7f7'); \n      colormap.set('sec', '#a6dba0'); \n      colormap.set('aircraft', '#008837'); \n      if (this.curr_airport == null){\n        this.curr_airport = local_airport\n        var link = []\n        for (let i = 0; i < stateData.length; i++) {\n          var from = stateData[i].ORIGIN\n          var to = stateData[i].DEST\n          // var from_city = stateData[i].ORIGIN_CITY_NAME\n          // var to_city = stateData[i].DEST_CITY_NAME\n          var del_t = stateData[i].ARR_DELAY\n          var carrier = stateData[i].CARRIER_DELAY\n          var weather = stateData[i].WEATHER_DELAY\n          var nas = stateData[i].NAS_DELAY\n          var sec = stateData[i].SECURITY_DELAY\n          var aircraft = stateData[i].LATE_AIRCRAFT_DELAY\n          var from_lng = this.airport_geo.filter(d => d.local_code == from)[0].longitude_deg\n          var from_lat = this.airport_geo.filter(d => d.local_code == from)[0].latitude_deg\n          var to_lng = this.airport_geo.filter(d => d.local_code == to)[0].longitude_deg\n          var to_lat = this.airport_geo.filter(d => d.local_code == to)[0].latitude_deg\n          var reason = null;\n          var max = 0\n          if (carrier > max) {reason = 'carrier'; max = carrier}\n          if (weather > max) {reason = 'weather'; max = weather}\n          if (nas > max) {reason = 'nas'; max = nas}\n          if (sec > max) {reason = 'sec'; max = sec}\n          if (aircraft > max) {reason = 'aircraft'; max = aircraft}\n          link.push({\n            type: \"LineString\",\n            coordinates: [[from_lng, from_lat],[to_lng, to_lat]],\n            from: from,\n            to: to,\n            del_t: del_t,\n            carrier: carrier,\n            weather: weather,\n            nas: nas,\n            sec: sec,\n            aircraft: aircraft,\n            color: colormap.get(reason)\n\n          })\n        }\n        var projection = d3.geoAlbersUsa().scale(1300).translate([487.5, 305]);\n        var path = d3.geoPath().projection(projection);\n        var svg = d3.select('#us_map')\n        svg.selectAll(\"myPath\")\n          .data(link)\n          .enter()\n          .append(\"path\")\n            .attr('class', `${this.curr_airport}`)\n            .attr('display', 'visible')\n            .attr(\"d\", function(d){ return path(d)})\n            .style(\"fill\", \"none\")\n            .style(\"stroke\", function(d){ return d.color})\n            .style(\"stroke-width\", 2)\n            .on('mouseover', function () {\n              d3.select(this)\n              .style('stroke-width', 8)\n            })\n            .on('mouseout', function () {\n              d3.select(this)\n                .style('stroke-width', 2)\n            })\n            .append('title')\n            .text(d => `From: ${d.from} \\nTo: ${d.to} \\nDelayed Time: ${d.del_t} \\nCarrier: ${d.carrier} \\nWeather: ${d.weather} \\nNAS: ${d.nas} \\n Security: ${d.sec} \\nAircraft: ${d.aircraft}`)\n            \n      } else if (this.curr_airport == local_airport) {\n        d3.selectAll(`.${this.curr_airport}`)\n          .attr('display', 'none')\n        this.curr_airport = null\n      } else {\n        alert('click the state shown first')\n      }\n      \n    },\n    created(){window.drawPath =this.drawPath;},\n    buildMap () {\n      // var drawPath = this.drawPath()\n      const colormap = new Map();\n      colormap.set('carrier', '#7b3294');   \n      colormap.set('weather', '#c2a5cf'); \n      colormap.set('nas', '#f7f7f7'); \n      colormap.set('sec', '#a6dba0'); \n      colormap.set('aircraft', '#008837'); \n      var data = ['carrier', 'weather', 'nas', 'sec', 'arcraft']\n      function legend({\n        title,\n        width = 320,\n        height = 100,\n        marginTop = 18,\n\t\t\t\t// marginRight = 0,\n\t\t\t\tmarginBottom = 16,\n\t\t\t\t// marginLeft = 0\n      }) {\n        const svg = d3.create(\"svg\")\n\t\t\t\t\t.attr(\"width\", width)\n\t\t\t\t\t.attr(\"height\", height)\n\t\t\t\t\t.attr(\"viewBox\", [0, 0, width, height])\n\t\t\t\t\t.style(\"overflow\", \"visible\")\n\t\t\t\t\t.style(\"display\", \"block\");\n        svg.selectAll(\"dots\")\n          .data(data)\n          .enter()\n          .append('rect')\n            .attr(\"x\", 0)\n            .attr(\"y\", function(d,i){ return 20 + i*(10+5)})\n            .attr(\"width\", 10)\n            .attr(\"height\", 10)\n            .style(\"fill\", function(d){ return colormap.get(d)})\n        svg.selectAll(\"mylabels\")\n          .data(data)\n          .enter()\n          .append(\"text\")\n            .attr(\"x\", 10*1.2)\n            .attr(\"y\", function(d,i){ return 20 + i*(10+5) + (10/2)})\n            // .style(\"fill\", function(d){ return color(d)})\n            .text(function(d){ return d})\n            .attr(\"text-anchor\", \"left\")\n            .style(\"alignment-baseline\", \"middle\")\n        svg.append('g')\n          .attr(\"transform\", `translate(0, ${height - marginBottom})`)\n          .call(g => g.append(\"text\")\n\t\t\t\t\t\t.attr(\"y\", marginTop + marginBottom - height - 6)\n\t\t\t\t\t\t.attr(\"fill\", \"currentColor\")\n\t\t\t\t\t\t.attr(\"text-anchor\", \"start\")\n\t\t\t\t\t\t.attr(\"font-weight\", \"bold\")\n\t\t\t\t\t\t.text(title));\n        return svg.node()\n      }\n      var svg = d3.select('#us_map')\n        .attr('viewBox', [0, 0, 975, 610])\n      var path = d3.geoPath();\n      \n\t\t\t\tsvg.append('g')\n\t\t\t\t\t.attr('class', 'states')\n\t\t\t\t\t.selectAll('path')\n\t\t\t\t\t.data(topojson.feature(this.mapData, this.mapData.objects.states).features)  \n\t\t\t\t\t.enter()\n\t\t\t\t\t.append('path')\n          .attr('onclick', d => (`drawPath('${d.properties.name}')`))\n\t\t\t\t\t.attr('d', path)\n        \n\t\t\t\n\t\t\t\tsvg.append('path')  //🎒 explain:\n\t\t\t\t\t.attr('class', 'state-borders')\n\t\t\t\t\t.attr('d', path(topojson.mesh(this.mapData, this.mapData.objects.states, (a, b) => a !== b))); \n\n        svg.append(\"g\")\n\t\t\t\t\t.attr(\"transform\", \"translate(610,20)\")\n\t\t\t\t\t.append(() => legend({title: 'Delayed Reason', width: 260 }));\n    },\n    buildMapbox () {\n      Mapbox.accessToken = 'pk.eyJ1Ijoid2xvdSIsImEiOiJja3Y2cGEwMm8xbWtsMm5ubmNtd2tlNnE0In0.Wy7wOVN5-NJ6Ye8kzCVcBg';\n      const map = new Mapbox.Map({\n        container: 'mbfm', // container ID\n        style: 'mapbox://styles/mapbox/dark-v10', // style URL\n        center: [-98.583333,39.833333], // starting position [lng, lat]\n        zoom: 3.5 // starting zoom\n      });\n\n      const route = {\n        'type': 'FeatureCollection',\n        'features': []\n      }\n      map.on('load', function () { \n        map.resize()\n        map.addSource(`route`, {\n          'type': 'geojson',\n          'data': route\n        })\n        map.addLayer({\n          'id': `route`,\n          'source': `route`,\n          'type': 'line',\n          'paint': {\n            'line-width': 2,\n            'line-color': '#007cbf'\n          }\n        })\n      })\n      this.map = map\n    },\n    updateRoute () {\n      this.routes = {\n        'type': 'FeatureCollection',\n        'features': []\n        }\n      if (this.selected != null) {\n        var stateData = this.flightsData.filter(d => d.ORIGIN == this.selected && d.FL_DATE == this.dateValue)\n        for (let i = 0; i < stateData.length; i++) {\n          var from = stateData[i].ORIGIN\n          var to = stateData[i].DEST\n          var cName = stateData[i].MKT_UNIQUE_CARRIER\n          var fNum = stateData[i].MKT_CARRIER_FL_NUM\n          var del_t = stateData[i].ARR_DELAY\n          var del_reason = []\n          if (stateData[i].CARRIER_DELAY != 0) {\n            del_reason.push(`Carrier: ${stateData[i].CARRIER_DELAY} mins`)\n          }\n          if (stateData[i].WEATHER_DELAY != 0) {\n            del_reason.push(`Weather: ${stateData[i].WEATHER_DELAY} mins`)\n          }\n          if (stateData[i].NAS_DELAY != 0) {\n            del_reason.push(`NAS: ${stateData[i].NAS_DELAY} mins`)\n          }\n          if (stateData[i].SECURITY_DELAY != 0) {\n            del_reason.push(`Security: ${stateData[i].SECURITY_DELAY} mins`)\n          }\n          if (stateData[i].LATE_AIRCRAFT_DELAY != 0) {\n            del_reason.push(`Aircraft: ${stateData[i].LATE_AIRCRAFT_DELAY} mins`)\n          }\n          // var carrier = stateData[i].CARRIER_DELAY\n          // var weather = stateData[i].WEATHER_DELAY\n          // var nas = stateData[i].NAS_DELAY\n          // var sec = stateData[i].SECURITY_DELAY\n          // var aircraft = stateData[i].LATE_AIRCRAFT_DELAY\n          var from_lng = this.airport_geo.filter(d => d.local_code == from)[0].longitude_deg\n          var from_lat = this.airport_geo.filter(d => d.local_code == from)[0].latitude_deg\n          var to_lng = this.airport_geo.filter(d => d.local_code == to)[0].longitude_deg\n          var to_lat = this.airport_geo.filter(d => d.local_code == to)[0].latitude_deg\n          // const destination = [-77.032, 38.913];\n\n          // A simple line from origin to destination.\n          var greatCircle = turf.greatCircle([from_lng, from_lat],[to_lng, to_lat], {\n            properties: {'cName': cName,\n                         'fNum': fNum,\n                         'del_t': del_t,\n                         'del_r': del_reason.join(', ')\n                        }\n            });\n          this.routes.features.push(greatCircle)\n          \n        }\n      }\n      this.map.getSource('route').setData(this.routes);\n      this.map.on('click', 'route', (d) => {\n        var path = document.getElementById('pd');\n        path.innerHTML = `<div>Flight: ${d.features[0].properties.cName} ${d.features[0].properties.fNum}</div>` + \n                         `<div>Delay Time(mins): ${d.features[0].properties.del_t}</div>` +\n                         `<div>Reason: ${d.features[0].properties.del_r}</div>`\n      })\n      this.map.on('mouseenter', 'route', () => {\n        this.map.getCanvas().style.cursor = 'pointer';\n        });\n        \n        // Change the cursor back to a pointer\n        // when it leaves the states layer.\n      this.map.on('mouseleave', 'route', () => {\n        this.map.getCanvas().style.cursor = '';\n        });\n    }\n  },\n  mounted: function () {\n    if (!this.$store.state.htmlMapData) {\n      var promises = []\n      promises.push(d3.json('states-albers-10m.json'))\n      promises.push(d3.csv('flights.csv'))\n      promises.push(d3.csv('airport_geo.csv'))\n      Promise.all(promises).then(values => {\n        this.rawData = values\n        this.mapData = values[0]\n        this.flightsData = values[1]\n        this.airport_geo = values[2]\n        this.$store.commit('htmlMapData', this.rawData);\n        this.created();\n        this.buildMap();\n        this.buildMapbox();\n      })\n      // d3.json('states-albers-10m.json').then(data => {\n      //   this.mapData = data;\n      //   // console.log('chartData set from file');\n      //   // console.log('chartData contains', this.mapData);\n      //   this.$store.commit('htmlMapData', this.mapData);\n\n      //   this.buildMap();\n      //   });\n    } else {\n      this.rawData = this.$store.state.htmlMapData;\n      this.mapData = this.rawData[0]\n      this.flightsData = this.rawData[1]\n      this.airport_geo = this.rawData[2]\n      // console.log('chartData set from store');\n      // console.log('chartData contains', this.mapData.length, 'rows');\n      this.created();\n      this.buildMap();\n      this.buildMapbox()\n    }\n  }\n}\n</script>\n\n<style>\n.states {\n  fill: #ccc;\n}\n\t\t\n.singlePath{\n  /* .style(\"fill\", \"none\")\n            .style(\"stroke\", \"orange\")\n            .style(\"stroke-width\", 2) */\n  stroke-width: 4;\n}\n.singlePath :hover {\n  /* .style(\"fill\", \"none\")\n            .style(\"stroke\", \"orange\")\n            .style(\"stroke-width\", 2) */\n  stroke: red;\n  stroke-width: 4;\n}\n\n\n\n.state-borders {\n  fill: none;\n  stroke: white;\n  /* stroke-width: 0.5px; */\n  stroke-linejoin: round;\n  stroke-linecap: round;\n  pointer-events: none;\n}\n.mapbox_container {\n    position: relative;\n    height: 610px !important;\n    width: 975px !important;\n    display: inline-block;\n    z-index: 1;\n}\n\n#airportpicker{\n  display: block;\n  width: 100%;\n  height: 100%;\n}\n\n#features {\n  position: absolute;\n  background: rgba(255, 255, 255, 0.7);\n  margin-right: 20px;\n  margin-left: 20px;\n  font-family: Arial, sans-serif;\n  overflow: auto;\n  border-radius: 3px;\n  right: 0;\n  height: 100px;\n  margin-top: 20px;\n  width: 300px;\n  z-index: 2;\n  padding-left: 20px;\n  text-anchor: middle;\n}\n</style>"]}]}