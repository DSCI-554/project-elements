{"remainingRequest":"/Users/aishwaryak/project-elements/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aishwaryak/project-elements/demo/src/views/Map.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/aishwaryak/project-elements/demo/src/views/Map.vue","mtime":1637200614708},{"path":"/Users/aishwaryak/project-elements/demo/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aishwaryak/project-elements/demo/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/aishwaryak/project-elements/demo/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/aishwaryak/project-elements/demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aishwaryak/project-elements/demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5zdGF0ZXMgewogIGZpbGw6ICNjY2M7Cn0KCQkKLmFpcnBvcnQgOmhvdmVyIHsKICBmaWxsOmJsYWNrOwp9Cgouc3RhdGUtYm9yZGVycyB7CiAgZmlsbDogbm9uZTsKICBzdHJva2U6IHdoaXRlOwogIC8qIHN0cm9rZS13aWR0aDogMC41cHg7ICovCiAgc3Ryb2tlLWxpbmVqb2luOiByb3VuZDsKICBzdHJva2UtbGluZWNhcDogcm91bmQ7CiAgcG9pbnRlci1ldmVudHM6IG5vbmU7Cn0K"},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Map.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"d3_map\">\n      <h1>This is an Map page</h1>\n      <div>\n        <label for=\"datepicker\">Choose a date</label>\n        <b-form-datepicker id=\"datepicker\" :min=\"min\" :max=\"max\" v-model=\"dateValue\" class=\"mb-2\" placeholder=\"Sunday, August 1, 2021\"></b-form-datepicker>\n        <p>Value: '{{ dateValue }}'</p>\n      </div>\n      <svg id='us_map'></svg>\n    </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\"\nimport * as topojson from 'topojson'\n\nexport default {\n  name: 'us_map',\n  data: function () {\n\n    return {\n      mapData: null,\n      flightsData: null,\n      rawData: null,\n      airport_geo: null,\n      curr_airport: null,\n      dateValue: '2021-08-01',\n      min: '2021-08-01',\n      max: '2021-08-31'\n    }\n  }, \n  methods: {\n    drawPath(state) {\n      console.log(state)\n      console.log(this.curr_state)\n      var stateData = this.flightsData.filter(d => d.ORIGIN_STATE_NM == state && d.FL_DATE == this.dateValue)\n      var local_airport = stateData[0].ORIGIN\n      if (this.curr_airport == null){\n        this.curr_airport = local_airport\n        var link = []\n        for (let i = 0; i < stateData.length; i++) {\n          var from = stateData[i].ORIGIN\n          var to = stateData[i].DEST\n          var from_lng = this.airport_geo.filter(d => d.local_code == from)[0].longitude_deg\n          var from_lat = this.airport_geo.filter(d => d.local_code == from)[0].latitude_deg\n          var to_lng = this.airport_geo.filter(d => d.local_code == to)[0].longitude_deg\n          var to_lat = this.airport_geo.filter(d => d.local_code == to)[0].latitude_deg\n          link.push({\n            type: \"LineString\",\n            coordinates: [[from_lng, from_lat],[to_lng, to_lat]]\n          })\n        }\n        var projection = d3.geoAlbersUsa().scale(1300).translate([487.5, 305]);\n        var path = d3.geoPath().projection(projection);\n        var svg = d3.select('#us_map')\n        svg.selectAll(\"myPath\")\n          .data(link)\n          .enter()\n          .append(\"path\")\n            .attr('class', `${this.curr_airport}`)\n            .attr('display', 'visible')\n            .attr(\"d\", function(d){ return path(d)})\n            .style(\"fill\", \"none\")\n            .style(\"stroke\", \"orange\")\n            .style(\"stroke-width\", 2)\n      } else if (this.curr_airport == local_airport) {\n        d3.selectAll(`.${this.curr_airport}`)\n          .attr('display', 'none')\n        this.curr_airport = null\n      } else {\n        alert('click the state shown first')\n      }\n      \n    },\n    created(){window.drawPath =this.drawPath;},\n    buildMap () {\n      // var drawPath = this.drawPath()\n      var svg = d3.select('#us_map')\n        .attr('viewBox', [0, 0, 975, 610])\n      // var projection = d3.geoAlbersUsa().scale(1300).translate([487.5, 305]);\n      var path = d3.geoPath();\n      \n\t\t\t\tsvg.append('g')\n\t\t\t\t\t.attr('class', 'states')\n\t\t\t\t\t.selectAll('path')\n\t\t\t\t\t.data(topojson.feature(this.mapData, this.mapData.objects.states).features)  \n\t\t\t\t\t.enter()\n\t\t\t\t\t.append('path')\n          .attr('onclick', d => (`drawPath('${d.properties.name}')`))\n\t\t\t\t\t.attr('d', path)\n          \n          // .attr('onclick', d => `alert('${d.properties.name}')`)\n          // .on('click', d => (`drawPath('${d.properties.name}')`))\n\t\t\t\n\t\t\t\tsvg.append('path')  //ðŸŽ’ explain:\n\t\t\t\t\t.attr('class', 'state-borders')\n\t\t\t\t\t.attr('d', path(topojson.mesh(this.mapData, this.mapData.objects.states, (a, b) => a !== b))); \n        // svg.selectAll(\"circle\")\n        //   .data(airports).enter()\n        //   .append(\"circle\")\n        //   .attr('class', 'airport')\n        //   .attr(\"cx\", d => { return projection(d)[0]})\n        //   .attr(\"cy\", d => { return projection(d)[1]})\n        //   .attr(\"r\", \"4px\")\n        //   .attr(\"fill\", \"red\")\n    }\n  },\n  mounted: function () {\n    if (!this.$store.state.htmlMapData) {\n      var promises = []\n      promises.push(d3.json('states-albers-10m.json'))\n      promises.push(d3.csv('flights.csv'))\n      promises.push(d3.csv('airport_geo.csv'))\n      Promise.all(promises).then(values => {\n        this.rawData = values\n        this.mapData = values[0]\n        this.flightsData = values[1]\n        this.airport_geo = values[2]\n        this.$store.commit('htmlMapData', this.rawData);\n        this.created();\n        this.buildMap();\n      })\n      // d3.json('states-albers-10m.json').then(data => {\n      //   this.mapData = data;\n      //   // console.log('chartData set from file');\n      //   // console.log('chartData contains', this.mapData);\n      //   this.$store.commit('htmlMapData', this.mapData);\n\n      //   this.buildMap();\n      //   });\n    } else {\n      this.rawData = this.$store.state.htmlMapData;\n      this.mapData = this.rawData[0]\n      this.flightsData = this.rawData[1]\n      this.airport_geo = this.rawData[2]\n      // console.log('chartData set from store');\n      // console.log('chartData contains', this.mapData.length, 'rows');\n      this.created();\n      this.buildMap();\n    }\n  }\n}\n</script>\n\n<style>\n.states {\n  fill: #ccc;\n}\n\t\t\n.airport :hover {\n  fill:black;\n}\n\n.state-borders {\n  fill: none;\n  stroke: white;\n  /* stroke-width: 0.5px; */\n  stroke-linejoin: round;\n  stroke-linecap: round;\n  pointer-events: none;\n}\n</style>"]}]}