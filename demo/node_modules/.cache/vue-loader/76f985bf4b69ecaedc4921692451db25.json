{"remainingRequest":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/src/views/Dashboard.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/src/views/Dashboard.vue","mtime":1638575039857},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/css-loader/dist/cjs.js","mtime":1637278779712},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637278782398},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/postcss-loader/src/index.js","mtime":1637278781105},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/cache-loader/dist/cjs.js","mtime":1637278779191},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/index.js","mtime":1637278782397}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50aXRsZXsKICBmb250LXNpemU6IDI0cHg7Cgp9Cgo="},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappingsikBA;AACA;;AAEA","file":"Dashboard.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"about\">\n    <b-tabs content-class=\"mt-3\">\n        <b-tab title=\"Analysis on Carriers\" active>\n          <b-button v-b-toggle.collapse-2 class=\"m-1\">Instruction</b-button>\n\n            <!-- Using value -->\n            <b-button v-b-toggle=\"'collapse-1'\" class=\"m-1\">Explanation</b-button>\n\n            <!-- Element to collapse -->\n            <b-collapse visible id=\"collapse-2\">\n              <b-card>\n                The Line chart shows the number of delayed flight on each day in August 2020. <br> \n                It'll show carrier name when hovered over on lines. <br>\n                When \"Show Guideline & Curtain\" is checked during the initial animation, <br>\n                the progress of line drawing will show. <br> \n                For explanation of this page, please click the <code>Explanation</code> button\n              </b-card>\n            </b-collapse>\n            <b-collapse id=\"collapse-1\">\n              <b-card>\n                Through out time, Carrier AA has the most delayed flight count, and Carrier HA has the least. <br>\n                However, major carriers do have more flights on each day to begin with,<br>\n                which directly increase the delayed flight count.<br>\n                This phenomenon can be observed by the gap (between 200~300 in y-axis) in line chart between carriers, <br>\n                where the 4 major carriers AA, UA, WN, and DL are above the gap while the rest is below.\n              </b-card>\n            </b-collapse>\n\n            <h1>Which carriers have more delay?</h1>\n            <div class=\"title\">Interactive & Animated Line Chart: Number Of Delayed Flight Count For Carriers Through Time</div>\n            <br />\n            <label class=\"guideline\">\n              Show Guideline & Curtain\n              <input type=\"checkbox\" id=\"show_guideline\"/>\n            </label>\n            <br />\n            <svg width=\"1200\" height=\"600\" id=\"line_chart\"></svg>\n        </b-tab>\n\n        <b-tab title=\"Analysis on States\">\n          <b-button v-b-toggle.collapse-3 class=\"m-1\">Instruction</b-button>\n\n          <!-- Using value -->\n          <b-button v-b-toggle=\"'collapse-4'\" class=\"m-1\">Explanation</b-button>\n\n          <!-- Element to collapse -->\n          <b-collapse visible id=\"collapse-3\">\n            <b-card>\n              The treemap shows the count of delayed flight on each state in the U.S..<br>\n              Select \"Weekday\" to see data on a typical weekday, and \"Weekend\" for a typical weekend data. <br>\n              Mouse over each state to check the details. <br>\n              For explanation of this page, please click the <code>Explanation</code> button\n            </b-card>\n          </b-collapse>\n          <b-collapse id=\"collapse-4\">\n            <b-card>\n              The states are sorted and colored by their geographical division. <br>\n              The detailed information of each state can be found when you put mouse on each state,<br>\n              including their geographical division, state name, and exact count of delayed flight.<br>\n              One key advantage of treemap is that it can show the proportion of delayed flight directly through the size of each cell.<br>\n              Larger cells contain more flight delays.\n            </b-card>\n          </b-collapse>\n            <h1>What is proportion of the delayed flight count for each state?</h1>\n            <div class=\"title\"> Treemap: Number Of Delayed Flight Count of Each State with Comparsion on Weekend and Weekday</div>\n            <label class=\"selection\"><input type=\"radio\" name=\"mode\" value=\"sumBySat\" checked> Weekend</label>\n            &nbsp;&nbsp;&nbsp;&nbsp;\n            <label class=\"selection\"><input type=\"radio\" name=\"mode\" value=\"sumByWed\"> Weekday</label>\n            <br />\n            <svg width=\"960\" height=\"960\" id=\"treemap\"></svg>\n        </b-tab>\n\n        <b-tab title=\"Analysis on Reasons\">\n          <b-button v-b-toggle.collapse-6 class=\"m-1\">Instruction</b-button>\n\n            <!-- Using value -->\n            <b-button v-b-toggle=\"'collapse-5'\" class=\"m-1\">Explanation</b-button>\n\n            <!-- Element to collapse -->\n            <b-collapse visible id=\"collapse-6\">\n              <b-card>\n                Hover over each section to see the percentage value of each delay reason.\n                For explanation of this page, please click the <code>Explanation</code> button\n              </b-card>\n            </b-collapse>\n            <b-collapse id=\"collapse-5\">\n              <b-card>\n                The most frequent reason of flight delay is Air Carrier Delay(38%), <br>\n                followed by delays caused by Aircraft Arriving Late (34%). <br>\n                Delays caused by Security reason is the least. <br>\n                Surprisingly, delays caused by weather is only 5%.\n              </b-card>\n            </b-collapse>\n\n            <h1>What are the reasons a flight gets delayed?</h1>\n            <div class=\"title\"> Donut Chart: Percentage of Each Delayed Reasons</div>\n            <br/>\n            <svg width=\"600\" height=\"600\" id=\"pie_chart\"></svg>\n        </b-tab>\n    </b-tabs>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\nimport {nest} from 'd3-collection';\n\nexport default {\n  name: 'd3Chart',\n  data: function () {\n    return {\n      rawData: null,\n      lineData: null,\n      region:null,\n      treemapData:null,\n      pieData:null\n    }\n  },\n  methods: {\n    buildLineChart() {\n\n      var lineOpacity = \"0.25\";\n      var lineOpacityHover = \"0.85\";\n      var otherLinesOpacityHover = \"0.25\";\n      var lineStroke = \"2px\";\n      var lineStrokeHover = \"3.5px\";\n      /*\n      var circleOpacity = '0.85';\n      var circleOpacityOnLineHover = \"0.25\"\n      var circleRadius = 3;\n      var circleRadiusHover = 6;*/\n\n      var parseDate = d3.timeParse(\"%Y-%m-%d\");\n\n      var data = this.lineData;\n      //console.log(data[0].FL_DATE); //this works\n\n      data.forEach(function(d) { \n        d.date = parseDate(d.FL_DATE);\n        d.carrier = d.MKT_UNIQUE_CARRIER;\n        d.delay = +d.NUM_OF_DELAY;  \n\n      });\n\n      \n      var sumstat = nest() // nest function allows to group the calculation per level of a factor\n          .key(function(d) { return d.carrier;})\n          .entries(data);\n\n      //console.log(sumstat); //working\n\n      var arr_time = d3.extent(data, function(d) { return d.date; })\n      \n      var margin = {top: 10, right: 30, bottom: 30, left: 60},\n          width = 1200 - margin.left - margin.right,\n          height = 600 - margin.top - margin.bottom;\n\n      // append the svg object to the body of the page\n      var svg = d3.select(\"#line_chart\")\n        .append(\"svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n          .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      //console.log(arr_time); //working\n      //Add x-axis\n      var x = d3.scaleLinear()\n        .domain(arr_time)\n        .range([ 0, width ]);\n      svg.append(\"g\")\n        .transition()\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x).ticks(32).tickFormat(d3.timeFormat('%b %d')));\n\n      var max_data = d3.max(data, function(d) { return +d.delay; })\n      //console.log(max_data)\n\n      // Add y-axis\n      var y = d3.scaleLinear()\n        .domain([0, max_data])\n        .range([ height, 0 ]);\n      svg.append(\"g\")\n        .call(d3.axisLeft(y))\n        .append('text')\n        .attr(\"x\", -150)\n        .attr(\"y\", -40)\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"fill\", \"#696969\")\n        .attr(\"font-size\", \"14px\")\n        .text(\"Number of Delayed Flights\");\n\n      var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n      /*\n      const transitionPath = d3\n        .transition()\n        .ease(d3.easeSin)\n        .duration(1000);*/\n      //console.log(transitionPath)\n\n      svg.selectAll(\".line\")\n      .data(sumstat)\n      .enter()\n      .append(\"path\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", function(d){ return color(d.key) })\n        .attr(\"stroke-width\", lineStroke)\n        .attr(\"opacity\", lineOpacity)\n        .attr(\"d\", function(d){\n          return d3.line()\n            .x(function(d) { return x(d.date); })\n            .y(function(d) { return y(+d.delay); })(d.values)\n        })\n        .on(\"mouseover\", function(d,i) {\n          //console.log(i)\n            svg.append(\"text\")\n              .transition()\n              .ease(d3.easeSin)\n              .attr(\"class\", \"title-text\")\n              .style(\"fill\", color(i.key))  \n              .style(\"font-size\", \"22px\")      \n              .text(\"Carrier: \"+i.key)\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"x\", 100)\n              .attr(\"y\", 20);\n            d3.selectAll('.line')\n            .style('opacity', otherLinesOpacityHover);\n            d3.select(this)\n              .style('opacity', lineOpacityHover)\n              .style(\"stroke-width\", lineStrokeHover)\n              .style(\"cursor\", \"pointer\");\n          })\n        .on(\"mouseout\", function() {\n            svg.select(\".title-text\").remove();\n            d3.selectAll(\".line\")\n                .style('opacity', lineOpacity);\n            d3.select(this)\n              .style('opacity', lineOpacity)\n              .style(\"stroke-width\", lineStroke)\n              .style(\"cursor\", \"none\");\n          })\n          ;\n\n        \n      \n        var curtain = svg.append('rect')\n          .attr('x', -1 * width)\n          .attr('y', -1 * height)\n          .attr('height', height)\n          .attr('width', width)\n          .attr('class', 'curtain')\n          .attr('transform', 'rotate(180)')\n          .style('fill', '#ffffff');\n          \n        /* Optionally add a guideline */\n        var guideline = svg.append('line')\n          .attr('stroke', '#333')\n          .attr('stroke-width', 0)\n          .attr('class', 'guide')\n          .attr('x1', 1)\n          .attr('y1', 1)\n          .attr('x2', 1)\n          .attr('y2', height)\n          \n        /* Create a shared transition for anything we're animating */\n        var t = svg.transition()\n          .delay(750)\n          .duration(6000)\n          .ease(d3.easeLinear)\n          .on('end', function() {\n            d3.select('line.guide')\n              .transition()\n              .style('opacity', 0)\n              .remove()\n          });\n        \n        t.select('rect.curtain')\n          .attr('width', 0);\n        t.select('line.guide')\n          .attr('transform', 'translate(' + width + ', 0)')\n\n        d3.select(\"#show_guideline\").on(\"change\", function() {\n          guideline.attr('stroke-width', this.checked ? 1 : 0);\n          curtain.attr(\"opacity\", this.checked ? 0.75 : 1);\n        })                              \n    },\n    buildTreemap() {\n      var width = 960;\n      var height = 960;\n      var margin = {top: 10, right: 10, bottom: 10, left: 10}\n\n      const keys = d3.range(1, 32);\n      console.log(keys)\n      console.log(this.treemapData)\n\n      var data = this.treemapData;\n\n      data.forEach(function(d) { \n        d.name = d.ORIGIN_STATE_NM\n        d.Sat =  +d[\"1\"]\n        d.Sun = +d[\"2\"]\n        d.Mon = +d[\"3\"]\n        d.Tue = +d[\"4\"]\n        d.Wed = +d[\"5\"]\n        d.Thu = +d[\"6\"]\n        d.Fri = +d[\"7\"]\n\n      });\n      console.log(data)\n      \n      const regionByState = new Map(this.region.map(d => [d.State, d.Region]));\n      console.log(regionByState)\n      const divisionByState = new Map(this.region.map(d => [d.State, d.Division]));\n      console.log(divisionByState)\n\n      const group = d3.group(data, d => regionByState.get(d.ORIGIN_STATE_NM), d => divisionByState.get(d.ORIGIN_STATE_NM)) //\n      console.log(group)\n\n      var color = d3.scaleOrdinal(group.keys(), d3.schemeCategory10.map(d => d3.interpolateRgb(d, \"white\")(0.5)))\n      console.log(color)\n    \n\n    var svg = d3.select(\"#treemap\")\n        .append(\"svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n          .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n      console.log(svg)\n\n    var format = d3.format(\",d\");\n\n    var treemap = d3.treemap()\n        .tile(d3.treemapResquarify)\n        .size([width, height])\n        .round(true)\n        .paddingInner(1);\n\n  var root = d3.hierarchy(group)\n      .eachBefore(function(d) { d.data.id = (d.parent ? d.parent.data.id + \".\" : \"\") + d.data.name; })\n      .sum(sumBySat)\n      .sort(function(a, b) { return b.height - a.height || b.value - a.value; });\n    console.log(root)\n  treemap(root);\n\n  var cell = svg.selectAll(\"g\")\n    .data(root.leaves())\n    .enter().append(\"g\")\n      .attr(\"transform\", function(d) { return \"translate(\" + d.x0 + \",\" + d.y0 + \")\"; });\n\n  cell.append(\"rect\")\n      .attr(\"id\", function(d) {  return d.data.id; })\n      .attr(\"width\", function(d) { return d.x1 - d.x0; })\n      .attr(\"height\", function(d) { return d.y1 - d.y0; })\n      .attr(\"fill\", function(d) {return color(d.parent.data[0]); });\n\n  cell.append(\"clipPath\")\n      .attr(\"id\", function(d) { return \"clip-\" + d.data.id; })\n    .append(\"use\")\n      .attr(\"xlink:href\", function(d) { return \"#\" + d.data.id; });\n\n  cell.append(\"text\")\n      .attr(\"clip-path\", function(d) { return \"url(#clip-\" + d.data.id + \")\"; })\n    .selectAll(\"tspan\")\n      .data(function(d) { return d.data.name.split(/(?=[A-Z][^A-Z])/g)})\n    .enter().append(\"tspan\")\n      .attr(\"x\", 4)\n      .attr(\"y\", function(d, i) { return 13 + i * 10; })\n      .text(function(d) { return d; });\n\n  cell.append(\"title\")\n      .text(function(d) { return \"Geographical Division: \" + d.parent.data[0] + \"\\n\" + \"State Name: \" + d.data.name + \"\\n\" + \"Delayed Flight Count: \" +format(d.value); });\n\n  \n  var f_selected = d3.selectAll('input[type=\"radio\"]').node().value;\n  console.log(f_selected)\n  \n  d3.selectAll('input[type=\"radio\"]')\n    .on(\"change\", changed)\n\n  \n  /*\nfunction change_f(){\n    var t = (this.value == \"sumBySat\") ? sumBySat :sumByWed\n    console.log(t);\n    return t\n  }\n  d3.selectAll('input[type=\"radio\"]')\n      .data([sumBySat, sumByWed], function(d) { \n                        return d ? d.name : this.value; })\n      .on(\"change\", changed);*/\n\n  var timeout = d3.timeout(function() {\n    d3.select('input[value=\"sumByWed\"]')\n        .property(\"checked\", true)\n        .dispatch(\"change\");\n  }, 2000);\n\n  \n  function changed() {\n    timeout.stop();\n\n    var t = (this.value == \"sumBySat\") ? sumBySat :sumByWed\n    console.log(t)\n    treemap(root.sum(t));\n\n    cell.transition()\n        .duration(750)\n        .attr(\"transform\", function(d) { return \"translate(\" + d.x0 + \",\" + d.y0 + \")\"; })\n      .select(\"rect\")\n        .attr(\"width\", function(d) { return d.x1 - d.x0; })\n        .attr(\"height\", function(d) { return d.y1 - d.y0; });\n  }\n  \n\nfunction sumByWed(d) {\n  return d.Wed;\n}\n\nfunction sumBySat(d) {\n  return d.Sat;\n}\n\n\n    },\n    buildPieChart(){\n\n        var width = 600;\n        var height = 600;\n        var radius = Math.min(width, height) / 2;\n        var donutWidth = 120;\n        var legendRectSize = 15;\n        var legendSpacing = 5;\n\n        var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n        var dataset = this.pieData;\n        \n        dataset.forEach(function(d) {\n            d.count = +d.count;\n          });\n\n        console.log(dataset);\n\n        var svg = d3.select('#pie_chart')\n          .append('svg')\n          .attr('width', width)\n          .attr('height', height)\n          .append('g')\n          .attr('transform', 'translate(' + (width / 2) + \n            ',' + (height / 2) + ')');\n\n        var arc = d3.arc()\n          .innerRadius(radius - donutWidth)\n          .outerRadius(radius);\n\n        var pie = d3.pie()\n          .value(function(d) { return d.count; })\n          .sort(null);\n                                 \n\n          var path = svg.selectAll('path')\n            .data(pie(dataset))\n            .enter()\n            .append('path')\n            .attr('d', arc)\n            .attr('fill', function(d) { \n              return color(d.data.label);\n            })\n            .on('mouseover', function(d,i) {                            \n            var total = d3.sum(dataset.map(function(d) {  \n              return d.count;                                           \n            }));                                                          \n            var percent = Math.round(1000 * i.data.count / total) / 10; \n\n            d3.select(this)\n            .attr(\"stroke\", \"#000\")\n\n            svg.append(\"text\")\n            .attr(\"y\", 100)\n            .style(\"text-anchor\", \"middle\")\n            .style(\"font-size\", 24)\n            .attr(\"class\",\"label\")\n            .style(\"fill\", color(i.data.label))\n            .text(\"Percentage:\" + percent + \"%\");\n\n            svg.append(\"text\")\n            .attr(\"y\", -90)\n            .style(\"text-anchor\", \"middle\")\n            .style(\"font-size\", 24)\n            .attr(\"class\",\"label2\")\n            .style(\"fill\", color(i.data.label))\n            .text(i.data.label);\n\n          });               \n          \n          path.on('mouseout', function() {                                \n            d3.select(this).attr(\"stroke\", null);  \n            svg.select(\".label\").remove();\n            svg.select(\".label2\").remove();                         \n          });                                                             \n\n        /*\n          path.on('mousemove', function(d) {  \n            tooltip.style('top', (d.pageY + 10) + 'px')          \n              .style('left', (d3.pageX + 10) + 'px');             \n          });      */                                                     \n            \n          var legend = svg.selectAll('.legend')\n            .data(color.domain())\n            .enter()\n            .append('g')\n            .attr('class', 'legend')\n            .attr('transform', function(d, i) {\n              var height = legendRectSize + legendSpacing;\n              var offset =  height * color.domain().length / 2;\n              var horz = -6 * legendRectSize;\n              var vert = i * height - offset;\n              return 'translate(' + horz + ',' + vert + ')';\n            });\n\n          legend.append('rect')\n            .attr('width', legendRectSize)\n            .attr('height', legendRectSize)                                   \n            .style('fill', color)\n            .style('stroke', color);\n            \n          legend.append('text')\n            .attr('x', legendRectSize + legendSpacing)\n            .attr('y', legendRectSize - legendSpacing)\n            .text(function(d) { return d; });\n    }\n\n  },\n  mounted: function () {\n\n    if (!this.$store.state.htmlMapData) {\n      var promises = []\n      promises.push(d3.csv('Data_for_line_chart.csv'))\n      promises.push(d3.csv('us_region.csv'))\n      promises.push(d3.csv('Data_for_treemap.csv'))\n      //promises.push(d3.csv('test_data.json'))\n      promises.push(d3.csv('delay.csv'))\n      Promise.all(promises).then(values => {\n        this.rawData = values\n        this.lineData = values[0]\n        this.region = values[1]\n        this.treemapData = values[2]\n        this.pieData = values[3]\n        this.$store.commit('htmlMapData', this.rawData);\n        this.buildLineChart();\n        this.buildTreemap();\n        this.buildPieChart();\n      })\n    } else {\n      this.rawData = this.$store.state.htmlMapData;\n      this.lineData = this.rawData[0]\n      this.region = this.rawData[1]\n      this.treemapData = this.rawData[2]\n      this.buildLineChart();\n      this.buildTreemap();\n      this.buildPieChart();\n    }\n\n    }\n  }\n\n</script>\n\n<style>\n.title{\n  font-size: 24px;\n\n}\n\n</style>\n\n/*reference:\nOverall:\nhttps://observablehq.com/@hydrosquall/d3-tutorial-interactivity-animated-transitions\n\nLine Plot:\nhttps://www.d3-graph-gallery.com/graph/line_several_group.html\n\nMouseOver:\nhttp://bl.ocks.org/WilliamQLiu/76ae20060e19bf42d774\nhttps://codepen.io/zakariachowdhury/pen/JEmjwq\n\nAnimation:\nhttps://bl.ocks.org/phvaillant/53b90038b9c5ac5f6b817a4f63fbc2af\nhttp://bl.ocks.org/atmccann/8966400\n\n*/"]}]}