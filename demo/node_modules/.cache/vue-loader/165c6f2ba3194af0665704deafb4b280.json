{"remainingRequest":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/src/views/Map.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/src/views/Map.vue","mtime":1638576059062},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/css-loader/dist/cjs.js","mtime":1637278779712},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1637278782398},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/postcss-loader/src/index.js","mtime":1637278781105},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/cache-loader/dist/cjs.js","mtime":1637278779191},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/index.js","mtime":1637278782397}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc3RhdGVzIHsKICBmaWxsOiAjY2NjOwp9CgkJCi5zaW5nbGVQYXRoewogIC8qIC5zdHlsZSgiZmlsbCIsICJub25lIikKICAgICAgICAgICAgLnN0eWxlKCJzdHJva2UiLCAib3JhbmdlIikKICAgICAgICAgICAgLnN0eWxlKCJzdHJva2Utd2lkdGgiLCAyKSAqLwogIHN0cm9rZS13aWR0aDogNDsKfQouc2luZ2xlUGF0aCA6aG92ZXIgewogIC8qIC5zdHlsZSgiZmlsbCIsICJub25lIikKICAgICAgICAgICAgLnN0eWxlKCJzdHJva2UiLCAib3JhbmdlIikKICAgICAgICAgICAgLnN0eWxlKCJzdHJva2Utd2lkdGgiLCAyKSAqLwogIHN0cm9rZTogcmVkOwogIHN0cm9rZS13aWR0aDogNDsKfQoKCgouc3RhdGUtYm9yZGVycyB7CiAgZmlsbDogbm9uZTsKICBzdHJva2U6IHdoaXRlOwogIC8qIHN0cm9rZS13aWR0aDogMC41cHg7ICovCiAgc3Ryb2tlLWxpbmVqb2luOiByb3VuZDsKICBzdHJva2UtbGluZWNhcDogcm91bmQ7CiAgcG9pbnRlci1ldmVudHM6IG5vbmU7Cn0KLm1hcGJveF9jb250YWluZXIgewogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgaGVpZ2h0OiA2MTBweCAhaW1wb3J0YW50OwogICAgd2lkdGg6IDk3NXB4ICFpbXBvcnRhbnQ7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICB6LWluZGV4OiAxOwp9CgojYWlycG9ydHBpY2tlcnsKICBkaXNwbGF5OiBibG9jazsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7Cn0KCiNmZWF0dXJlcyB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTsKICBtYXJnaW4tcmlnaHQ6IDIwcHg7CiAgbWFyZ2luLWxlZnQ6IDIwcHg7CiAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmOwogIG92ZXJmbG93OiBhdXRvOwogIGJvcmRlci1yYWRpdXM6IDNweDsKICByaWdodDogMDsKICBoZWlnaHQ6IDEwMHB4OwogIG1hcmdpbi10b3A6IDIwcHg7CiAgd2lkdGg6IDMwMHB4OwogIHotaW5kZXg6IDI7CiAgcGFkZGluZy1sZWZ0OiAyMHB4OwogIHRleHQtYW5jaG9yOiBtaWRkbGU7Cn0K"},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyaA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Map.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"d3_map\">\n      <b-tabs content-class=\"mt-3\">\n        <b-tab title=\"Delayed Reason in Each State\" active>\n          <b-button v-b-toggle.collapse-2 class=\"m-1\">Instruction</b-button>\n\n          <!-- Using value -->\n          <b-button v-b-toggle=\"'collapse-1'\" class=\"m-1\">Explanation</b-button>\n\n          <!-- Element to collapse -->\n          <b-collapse visible id=\"collapse-2\">\n            <b-card>\n              On this page, you can check delayed flights in each state <br> \n              Select the date and click on the state which you want to check, <br>\n              the paths of flights will be shown <br>\n              Move your mouse over the path, you can check detailed delay information <br>\n              For explanation of this page, please click the <code>Explanation</code> button\n            </b-card>\n          </b-collapse>\n          <b-collapse id=\"collapse-1\">\n            <b-card>\n              This map is built with a D3 map. The legend indicates the causes of delay in different colors. <br>\n              The default date is August 1, 2021.\n              By clicking on a state, paths of all delayed flights in this state would be shown. <br>\n              The color represents the main cause of delayed (flights may have multiple causes of delay). <br>\n              Move the mouse over the path, you can see the detailed delay information. <br>\n              Before checking another state, you must click the shown one first. <br>\n            </b-card>\n          </b-collapse>\n          <div>\n            <label for=\"datepicker\">Choose a date</label>\n            <b-form-datepicker id=\"datepicker\" :min=\"min\" :max=\"max\" v-model=\"dateValue\" class=\"mb-2\" placeholder=\"Sunday, August 1, 2021\"></b-form-datepicker>\n          </div>\n          <svg id='us_map'></svg>\n        </b-tab>\n        <b-tab title=\"Detailed Delayed Flight\">\n          <b-button v-b-toggle.collapse-3 class=\"m-1\">Instruction</b-button>\n\n          <!-- Using value -->\n          <b-button v-b-toggle=\"'collapse-4'\" class=\"m-1\">Explanation</b-button>\n\n          <!-- Element to collapse -->\n          <b-collapse visible id=\"collapse-3\">\n            <b-card>\n              On this page, you can check delayed flights by selecting the airport <br> \n              Similarly, pick up date and airport code <br>\n              Click on the path, details of the flight will be shown in the infobox <br>\n              For explanation of this page, please click the <code>Explanation</code> button\n            </b-card>\n          </b-collapse>\n          <b-collapse id=\"collapse-4\">\n            <b-card>\n              This map is built with Mapbox. The infobox is where you would see the detailed information <br>\n              By clicking on a path, the detailed information will be shown. <br>\n              The detailed information contains carriers, flight number, and delayed causes <br>\n            </b-card>\n          </b-collapse>\n          <b-row>\n            <b-col>\n              <b-container>\n                <label for=\"datepicker1\">Choose a date</label>\n                <b-form-datepicker id=\"datepicker1\" :min=\"min\" :max=\"max\" v-model=\"dateValue\" class=\"mb-2\" placeholder=\"Sunday, August 1, 2021\"></b-form-datepicker>\n              </b-container>\n            </b-col>\n            <b-col>\n              <b-container>\n                <label for=\"aiportpicker\" >Choose Departure Airport</label>\n                <b-form-select id = \"airportpicker\" v-model=\"selected\" :options=\"options\" size='lg'></b-form-select>\n              </b-container>\n            </b-col>\n          </b-row>\n          <!-- <div id='mbfm' class=\"mapbox_container\"> -->\n            <!-- <div class='map-overlay' id='features'><h2>Building Capacity</h2><div id='pd'><p>Hover over a building!</p></div></div> -->\n            <!-- <div class='map-overlay' id='legend'></div> -->\n          <!-- </div> -->\n          <b-container id='mbfm' class=\"mapbox_container\">\n            <!-- Content here -->\n            <div id='features'><h4>Flight Delay Info</h4><div id='pd'><p>Click a path!</p></div></div>\n\n          </b-container>\n        </b-tab>\n      </b-tabs>\n    </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\"\nimport * as topojson from 'topojson'\nimport Mapbox from \"mapbox-gl\";\nimport * as turf from \"@turf/turf\";\n// import { MglMap } from \"vue-mapbox\";\n\nexport default {\n  name: 'us_map',\n  data: function () {\n\n    return {\n      mapData: null,\n      flightsData: null,\n      rawData: null,\n      airport_geo: null,\n      curr_airport: null,\n      dateValue: '2021-08-01',\n      min: '2021-08-01',\n      max: '2021-08-31',\n      selected: 'null',\n      options: [\n        { value: null,text: 'Please select an airport'},\n        'ABQ','ANC','ATL','BDL','BHM','BNA','BOI','BOS','BTV','BWI','BZN','CHS','CLE','CLT','CRW','CVG','DCA','DEN','DFW','DSM','DTW',\n        'EWR','FAR','FSD','GUM','HNL','ICT','ILG','IND','JAC','JAN','JFK','LAS','LAX','LIT','MCO','MHT','MKE','MSP','MSY','OKC','OMA',\n        'ORD','PDX','PHL','PHX','PVD','PWM','SEA','SJU','SLC','STL','STT'],\n      routes: {\n        'type': 'FeatureCollection',\n        'features': []\n      },\n      map: null\n    }\n  }, \n  watch: {\n    selected() {\n      if (this.selected != null) {\n        this.updateRoute()\n      }\n    }\n  },\n  methods: {\n    drawPath(state) {\n      var stateData = this.flightsData.filter(d => d.ORIGIN_STATE_NM == state && d.FL_DATE == this.dateValue)\n      var local_airport = stateData[0].ORIGIN\n      const colormap = new Map();\n      colormap.set('carrier', '#7b3294');   \n      colormap.set('weather', '#c2a5cf'); \n      colormap.set('nas', '#f7f7f7'); \n      colormap.set('sec', '#a6dba0'); \n      colormap.set('aircraft', '#008837'); \n      if (this.curr_airport == null){\n        this.curr_airport = local_airport\n        var link = []\n        for (let i = 0; i < stateData.length; i++) {\n          var from = stateData[i].ORIGIN\n          var to = stateData[i].DEST\n          // var from_city = stateData[i].ORIGIN_CITY_NAME\n          // var to_city = stateData[i].DEST_CITY_NAME\n          var del_t = stateData[i].ARR_DELAY\n          var carrier = stateData[i].CARRIER_DELAY\n          var weather = stateData[i].WEATHER_DELAY\n          var nas = stateData[i].NAS_DELAY\n          var sec = stateData[i].SECURITY_DELAY\n          var aircraft = stateData[i].LATE_AIRCRAFT_DELAY\n          var from_lng = this.airport_geo.filter(d => d.local_code == from)[0].longitude_deg\n          var from_lat = this.airport_geo.filter(d => d.local_code == from)[0].latitude_deg\n          var to_lng = this.airport_geo.filter(d => d.local_code == to)[0].longitude_deg\n          var to_lat = this.airport_geo.filter(d => d.local_code == to)[0].latitude_deg\n          var reason = null;\n          var max = 0\n          if (carrier > max) {reason = 'carrier'; max = carrier}\n          if (weather > max) {reason = 'weather'; max = weather}\n          if (nas > max) {reason = 'nas'; max = nas}\n          if (sec > max) {reason = 'sec'; max = sec}\n          if (aircraft > max) {reason = 'aircraft'; max = aircraft}\n          link.push({\n            type: \"LineString\",\n            coordinates: [[from_lng, from_lat],[to_lng, to_lat]],\n            from: from,\n            to: to,\n            del_t: del_t,\n            carrier: carrier,\n            weather: weather,\n            nas: nas,\n            sec: sec,\n            aircraft: aircraft,\n            color: colormap.get(reason)\n\n          })\n        }\n        var projection = d3.geoAlbersUsa().scale(1300).translate([487.5, 305]);\n        var path = d3.geoPath().projection(projection);\n        var svg = d3.select('#us_map')\n        svg.selectAll(\"myPath\")\n          .data(link)\n          .enter()\n          .append(\"path\")\n            .attr('class', `${this.curr_airport}`)\n            .attr('display', 'visible')\n            .attr(\"d\", function(d){ return path(d)})\n            .style(\"fill\", \"none\")\n            .style(\"stroke\", function(d){ return d.color})\n            .style(\"stroke-width\", 2)\n            .on('mouseover', function () {\n              d3.select(this)\n              .style('stroke-width', 8)\n            })\n            .on('mouseout', function () {\n              d3.select(this)\n                .style('stroke-width', 2)\n            })\n            .append('title')\n            .text(d => `From: ${d.from} \\nTo: ${d.to} \\nDelayed Time: ${d.del_t} \\nCarrier: ${d.carrier} \\nWeather: ${d.weather} \\nNAS: ${d.nas} \\n Security: ${d.sec} \\nAircraft: ${d.aircraft}`)\n            \n      } else if (this.curr_airport == local_airport) {\n        d3.selectAll(`.${this.curr_airport}`)\n          .attr('display', 'none')\n        this.curr_airport = null\n      } else {\n        alert('click the state shown first')\n      }\n      \n    },\n    created(){window.drawPath =this.drawPath;},\n    buildMap () {\n      // var drawPath = this.drawPath()\n      const colormap = new Map();\n      colormap.set('carrier', '#7b3294');   \n      colormap.set('weather', '#c2a5cf'); \n      colormap.set('nas', '#f7f7f7'); \n      colormap.set('sec', '#a6dba0'); \n      colormap.set('aircraft', '#008837'); \n      var data = ['carrier', 'weather', 'nas', 'sec', 'arcraft']\n      function legend({\n        title,\n        width = 320,\n        height = 100,\n        marginTop = 18,\n\t\t\t\t// marginRight = 0,\n\t\t\t\tmarginBottom = 16,\n\t\t\t\t// marginLeft = 0\n      }) {\n        const svg = d3.create(\"svg\")\n\t\t\t\t\t.attr(\"width\", width)\n\t\t\t\t\t.attr(\"height\", height)\n\t\t\t\t\t.attr(\"viewBox\", [0, 0, width, height])\n\t\t\t\t\t.style(\"overflow\", \"visible\")\n\t\t\t\t\t.style(\"display\", \"block\");\n        svg.selectAll(\"dots\")\n          .data(data)\n          .enter()\n          .append('rect')\n            .attr(\"x\", 0)\n            .attr(\"y\", function(d,i){ return 20 + i*(10+5)})\n            .attr(\"width\", 10)\n            .attr(\"height\", 10)\n            .style(\"fill\", function(d){ return colormap.get(d)})\n        svg.selectAll(\"mylabels\")\n          .data(data)\n          .enter()\n          .append(\"text\")\n            .attr(\"x\", 10*1.2)\n            .attr(\"y\", function(d,i){ return 20 + i*(10+5) + (10/2)})\n            // .style(\"fill\", function(d){ return color(d)})\n            .text(function(d){ return d})\n            .attr(\"text-anchor\", \"left\")\n            .style(\"alignment-baseline\", \"middle\")\n        svg.append('g')\n          .attr(\"transform\", `translate(0, ${height - marginBottom})`)\n          .call(g => g.append(\"text\")\n\t\t\t\t\t\t.attr(\"y\", marginTop + marginBottom - height - 6)\n\t\t\t\t\t\t.attr(\"fill\", \"currentColor\")\n\t\t\t\t\t\t.attr(\"text-anchor\", \"start\")\n\t\t\t\t\t\t.attr(\"font-weight\", \"bold\")\n\t\t\t\t\t\t.text(title));\n        return svg.node()\n      }\n      var svg = d3.select('#us_map')\n        .attr('viewBox', [0, 0, 975, 610])\n      var path = d3.geoPath();\n      \n\t\t\t\tsvg.append('g')\n\t\t\t\t\t.attr('class', 'states')\n\t\t\t\t\t.selectAll('path')\n\t\t\t\t\t.data(topojson.feature(this.mapData, this.mapData.objects.states).features)  \n\t\t\t\t\t.enter()\n\t\t\t\t\t.append('path')\n          .attr('onclick', d => (`drawPath('${d.properties.name}')`))\n\t\t\t\t\t.attr('d', path)\n        \n\t\t\t\n\t\t\t\tsvg.append('path')  //🎒 explain:\n\t\t\t\t\t.attr('class', 'state-borders')\n\t\t\t\t\t.attr('d', path(topojson.mesh(this.mapData, this.mapData.objects.states, (a, b) => a !== b))); \n\n        svg.append(\"g\")\n\t\t\t\t\t.attr(\"transform\", \"translate(610,20)\")\n\t\t\t\t\t.append(() => legend({title: 'Delayed Reason', width: 260 }));\n    },\n    buildMapbox () {\n      Mapbox.accessToken = 'pk.eyJ1Ijoid2xvdSIsImEiOiJja3Y2cGEwMm8xbWtsMm5ubmNtd2tlNnE0In0.Wy7wOVN5-NJ6Ye8kzCVcBg';\n      const map = new Mapbox.Map({\n        container: 'mbfm', // container ID\n        style: 'mapbox://styles/mapbox/dark-v10', // style URL\n        center: [-98.583333,39.833333], // starting position [lng, lat]\n        zoom: 3.5 // starting zoom\n      });\n\n      const route = {\n        'type': 'FeatureCollection',\n        'features': []\n      }\n      map.on('load', function () { \n        map.resize()\n        map.addSource(`route`, {\n          'type': 'geojson',\n          'data': route\n        })\n        map.addLayer({\n          'id': `route`,\n          'source': `route`,\n          'type': 'line',\n          'paint': {\n            'line-width': 2,\n            'line-color': '#007cbf'\n          }\n        })\n      })\n      this.map = map\n    },\n    updateRoute () {\n      this.routes = {\n        'type': 'FeatureCollection',\n        'features': []\n        }\n      if (this.selected != null) {\n        var stateData = this.flightsData.filter(d => d.ORIGIN == this.selected && d.FL_DATE == this.dateValue)\n        for (let i = 0; i < stateData.length; i++) {\n          var from = stateData[i].ORIGIN\n          var to = stateData[i].DEST\n          var cName = stateData[i].MKT_UNIQUE_CARRIER\n          var fNum = stateData[i].MKT_CARRIER_FL_NUM\n          var del_t = stateData[i].ARR_DELAY\n          var del_reason = []\n          if (stateData[i].CARRIER_DELAY != 0) {\n            del_reason.push(`Carrier: ${stateData[i].CARRIER_DELAY} mins`)\n          }\n          if (stateData[i].WEATHER_DELAY != 0) {\n            del_reason.push(`Weather: ${stateData[i].WEATHER_DELAY} mins`)\n          }\n          if (stateData[i].NAS_DELAY != 0) {\n            del_reason.push(`NAS: ${stateData[i].NAS_DELAY} mins`)\n          }\n          if (stateData[i].SECURITY_DELAY != 0) {\n            del_reason.push(`Security: ${stateData[i].SECURITY_DELAY} mins`)\n          }\n          if (stateData[i].LATE_AIRCRAFT_DELAY != 0) {\n            del_reason.push(`Aircraft: ${stateData[i].LATE_AIRCRAFT_DELAY} mins`)\n          }\n          // var carrier = stateData[i].CARRIER_DELAY\n          // var weather = stateData[i].WEATHER_DELAY\n          // var nas = stateData[i].NAS_DELAY\n          // var sec = stateData[i].SECURITY_DELAY\n          // var aircraft = stateData[i].LATE_AIRCRAFT_DELAY\n          var from_lng = this.airport_geo.filter(d => d.local_code == from)[0].longitude_deg\n          var from_lat = this.airport_geo.filter(d => d.local_code == from)[0].latitude_deg\n          var to_lng = this.airport_geo.filter(d => d.local_code == to)[0].longitude_deg\n          var to_lat = this.airport_geo.filter(d => d.local_code == to)[0].latitude_deg\n          // const destination = [-77.032, 38.913];\n\n          // A simple line from origin to destination.\n          var greatCircle = turf.greatCircle([from_lng, from_lat],[to_lng, to_lat], {\n            properties: {'cName': cName,\n                         'fNum': fNum,\n                         'del_t': del_t,\n                         'del_r': del_reason.join(', ')\n                        }\n            });\n          this.routes.features.push(greatCircle)\n          \n        }\n      }\n      this.map.getSource('route').setData(this.routes);\n      this.map.on('click', 'route', (d) => {\n        var path = document.getElementById('pd');\n        path.innerHTML = `<div>Flight: ${d.features[0].properties.cName} ${d.features[0].properties.fNum}</div>` + \n                         `<div>Delay Time(mins): ${d.features[0].properties.del_t}</div>` +\n                         `<div>Reason: ${d.features[0].properties.del_r}</div>`\n      })\n      this.map.on('mouseenter', 'route', () => {\n        this.map.getCanvas().style.cursor = 'pointer';\n        });\n        \n        // Change the cursor back to a pointer\n        // when it leaves the states layer.\n      this.map.on('mouseleave', 'route', () => {\n        this.map.getCanvas().style.cursor = '';\n        });\n    }\n  },\n  mounted: function () {\n    if (!this.$store.state.htmlMapData) {\n      var promises = []\n      promises.push(d3.json('states-albers-10m.json'))\n      promises.push(d3.csv('flights.csv'))\n      promises.push(d3.csv('airport_geo.csv'))\n      Promise.all(promises).then(values => {\n        this.rawData = values\n        this.mapData = values[0]\n        this.flightsData = values[1]\n        this.airport_geo = values[2]\n        this.$store.commit('htmlMapData', this.rawData);\n        this.created();\n        this.buildMap();\n        this.buildMapbox();\n      })\n      // d3.json('states-albers-10m.json').then(data => {\n      //   this.mapData = data;\n      //   // console.log('chartData set from file');\n      //   // console.log('chartData contains', this.mapData);\n      //   this.$store.commit('htmlMapData', this.mapData);\n\n      //   this.buildMap();\n      //   });\n    } else {\n      this.rawData = this.$store.state.htmlMapData;\n      this.mapData = this.rawData[0]\n      this.flightsData = this.rawData[1]\n      this.airport_geo = this.rawData[2]\n      // console.log('chartData set from store');\n      // console.log('chartData contains', this.mapData.length, 'rows');\n      this.created();\n      this.buildMap();\n      this.buildMapbox()\n    }\n  }\n}\n</script>\n\n<style>\n.states {\n  fill: #ccc;\n}\n\t\t\n.singlePath{\n  /* .style(\"fill\", \"none\")\n            .style(\"stroke\", \"orange\")\n            .style(\"stroke-width\", 2) */\n  stroke-width: 4;\n}\n.singlePath :hover {\n  /* .style(\"fill\", \"none\")\n            .style(\"stroke\", \"orange\")\n            .style(\"stroke-width\", 2) */\n  stroke: red;\n  stroke-width: 4;\n}\n\n\n\n.state-borders {\n  fill: none;\n  stroke: white;\n  /* stroke-width: 0.5px; */\n  stroke-linejoin: round;\n  stroke-linecap: round;\n  pointer-events: none;\n}\n.mapbox_container {\n    position: relative;\n    height: 610px !important;\n    width: 975px !important;\n    display: inline-block;\n    z-index: 1;\n}\n\n#airportpicker{\n  display: block;\n  width: 100%;\n  height: 100%;\n}\n\n#features {\n  position: absolute;\n  background: rgba(255, 255, 255, 0.7);\n  margin-right: 20px;\n  margin-left: 20px;\n  font-family: Arial, sans-serif;\n  overflow: auto;\n  border-radius: 3px;\n  right: 0;\n  height: 100px;\n  margin-top: 20px;\n  width: 300px;\n  z-index: 2;\n  padding-left: 20px;\n  text-anchor: middle;\n}\n</style>"]}]}