{"remainingRequest":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/babel-loader/lib/index.js!/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/src/views/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/src/views/Dashboard.vue","mtime":1638508973347},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/babel.config.js","mtime":1637278778268},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/cache-loader/dist/cjs.js","mtime":1637278779191},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/babel-loader/lib/index.js","mtime":1637278778721},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/cache-loader/dist/cjs.js","mtime":1637278779191},{"path":"/Users/zhangzixin/Desktop/USC/DSCI554/project-elements/demo/node_modules/vue-loader/lib/index.js","mtime":1637278782397}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"about\">\n    <b-tabs content-class=\"mt-3\">\n        <b-tab title=\"Carrier Analysis\" active>\n            <h1>Interactive & Animated Line Chart</h1>\n            <div class=\"title\"> Number Of Delayed Flight Count For Carriers Through Time</div>\n            <br />\n            <label class=\"guideline\">\n              Show Guideline & Curtain\n              <input type=\"checkbox\" id=\"show_guideline\" />\n            </label>\n            <br />\n            <svg width=\"1200\" height=\"600\" id=\"line_chart\"></svg>\n        </b-tab>\n\n        <b-tab title=\"States Analysis\">\n            <h1>D3 Animated Treemap</h1>\n            <div class=\"title\"> Number Of Delayed Flight Count For Carriers Through Time</div>\n            <svg width=\"954\" height=\"954\" id=\"treemap\"></svg>\n        </b-tab>\n\n        <b-tab title=\"Reasons Analysis\">\n            <h1>What are the reasons a flight gets delayed?</h1>\n            <div class=\"title\"> Percentage of Each Delayed Reasons Shown in Donut Chart</div>\n            <br/>\n            <svg width=\"600\" height=\"600\" id=\"pie_chart\"></svg>\n        </b-tab>\n    </b-tabs>\n  </div>\n</template>\n\n<script>\n\nimport * as d3 from 'd3';\nimport {nest} from 'd3-collection';\n\nexport default {\n  name: 'd3Chart',\n  data: function () {\n    return {\n      rawData: null,\n      lineData: null,\n      region:null,\n      treemapData:null,\n      pieData:null\n    }\n  },\n  methods: {\n    chart(){\n\n      var width = 800;\n      var height = 600;\n      var margin = 50;\n      var xScale = d3.scaleLinear()\n                .domain([0,2021])\n                .range([0, width]);\n\n      var yScale = d3.scaleLinear()\n                .domain([0, 1000])\n                .range([height, 0]);\n\n      var svg = d3.select(\"#line_chart\")\n              .append(\"svg\")\n              .attr(\"width\", width+margin)\n              .attr(\"height\", height+margin)\n              .append('g')\n              .attr(\"transform\", `translate(${margin}, ${margin})`);\n              \n      var xAxis = d3.axisBottom(xScale).ticks(5);\n      var yAxis = d3.axisLeft(yScale).ticks(5);\n\n      svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", `translate(0, ${height-margin})`)\n        .call(xAxis)\n        .text(\"Year\");\n        \n        svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(yAxis)\n        .append('text')\n        .attr(\"y\", 15)\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"fill\", \"#000\")\n        .text(\"Number of Delayed Flights\");\n    },\n    buildLineChart() {\n      /*var width = 800;\n      var height = 800;\n      var margin = 50;\n      var duration = 250;\n      */\n      var lineOpacity = \"0.25\";\n      var lineOpacityHover = \"0.85\";\n      var otherLinesOpacityHover = \"0.25\";\n      var lineStroke = \"2px\";\n      var lineStrokeHover = \"3.5px\";\n      /*\n      var circleOpacity = '0.85';\n      var circleOpacityOnLineHover = \"0.25\"\n      var circleRadius = 3;\n      var circleRadiusHover = 6;*/\n\n      var parseDate = d3.timeParse(\"%Y-%m-%d\");\n\n      var data = this.lineData;\n      //console.log(data[0].FL_DATE); //this works\n\n      data.forEach(function(d) { \n        d.date = parseDate(d.FL_DATE);\n        d.carrier = d.MKT_UNIQUE_CARRIER;\n        d.delay = +d.NUM_OF_DELAY;  \n\n      });\n\n      \n      var sumstat = nest() // nest function allows to group the calculation per level of a factor\n          .key(function(d) { return d.carrier;})\n          .entries(data);\n\n      //console.log(sumstat); //working\n\n      var arr_time = d3.extent(data, function(d) { return d.date; })\n      \n      var margin = {top: 10, right: 30, bottom: 30, left: 60},\n          width = 1200 - margin.left - margin.right,\n          height = 600 - margin.top - margin.bottom;\n\n      // append the svg object to the body of the page\n      var svg = d3.select(\"#line_chart\")\n        .append(\"svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n          .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      //console.log(arr_time); //working\n      //Add x-axis\n      var x = d3.scaleLinear()\n        .domain(arr_time)\n        .range([ 0, width ]);\n      svg.append(\"g\")\n        .transition()\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x).ticks(32).tickFormat(d3.timeFormat('%b %d')));\n\n      var max_data = d3.max(data, function(d) { return +d.delay; })\n      //console.log(max_data)\n\n      // Add y-axis\n      var y = d3.scaleLinear()\n        .domain([0, max_data])\n        .range([ height, 0 ]);\n      svg.append(\"g\")\n        .call(d3.axisLeft(y))\n        .append('text')\n        .attr(\"x\", -150)\n        .attr(\"y\", -40)\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"fill\", \"#696969\")\n        .attr(\"font-size\", \"14px\")\n        .text(\"Number of Delayed Flights\");\n\n      var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n      /*\n      const transitionPath = d3\n        .transition()\n        .ease(d3.easeSin)\n        .duration(1000);*/\n      //console.log(transitionPath)\n\n      svg.selectAll(\".line\")\n      .data(sumstat)\n      .enter()\n      .append(\"path\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", function(d){ return color(d.key) })\n        .attr(\"stroke-width\", lineStroke)\n        .attr(\"opacity\", lineOpacity)\n        .attr(\"d\", function(d){\n          return d3.line()\n            .x(function(d) { return x(d.date); })\n            .y(function(d) { return y(+d.delay); })(d.values)\n        })\n        .on(\"mouseover\", function(d,i) {\n          //console.log(i)\n            svg.append(\"text\")\n              .transition()\n              .ease(d3.easeSin)\n              .attr(\"class\", \"title-text\")\n              .style(\"fill\", color(i.key))  \n              .style(\"font-size\", \"22px\")      \n              .text(\"Carrier: \"+i.key)\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"x\", 100)\n              .attr(\"y\", 20);\n            d3.selectAll('.line')\n            .style('opacity', otherLinesOpacityHover);\n            d3.select(this)\n              .style('opacity', lineOpacityHover)\n              .style(\"stroke-width\", lineStrokeHover)\n              .style(\"cursor\", \"pointer\");\n          })\n        .on(\"mouseout\", function() {\n            svg.select(\".title-text\").remove();\n            d3.selectAll(\".line\")\n                .style('opacity', lineOpacity);\n            d3.select(this)\n              .style('opacity', lineOpacity)\n              .style(\"stroke-width\", lineStroke)\n              .style(\"cursor\", \"none\");\n          })\n          ;\n\n        \n      \n        var curtain = svg.append('rect')\n          .attr('x', -1 * width)\n          .attr('y', -1 * height)\n          .attr('height', height)\n          .attr('width', width)\n          .attr('class', 'curtain')\n          .attr('transform', 'rotate(180)')\n          .style('fill', '#ffffff');\n          \n        /* Optionally add a guideline */\n        var guideline = svg.append('line')\n          .attr('stroke', '#333')\n          .attr('stroke-width', 0)\n          .attr('class', 'guide')\n          .attr('x1', 1)\n          .attr('y1', 1)\n          .attr('x2', 1)\n          .attr('y2', height)\n          \n        /* Create a shared transition for anything we're animating */\n        var t = svg.transition()\n          .delay(750)\n          .duration(6000)\n          .ease(d3.easeLinear)\n          .on('end', function() {\n            d3.select('line.guide')\n              .transition()\n              .style('opacity', 0)\n              .remove()\n          });\n        \n        t.select('rect.curtain')\n          .attr('width', 0);\n        t.select('line.guide')\n          .attr('transform', 'translate(' + width + ', 0)')\n\n        d3.select(\"#show_guideline\").on(\"change\", function() {\n          guideline.attr('stroke-width', this.checked ? 1 : 0);\n          curtain.attr(\"opacity\", this.checked ? 0.75 : 1);\n        })                              \n    },\n    buildTreemap() {\n      var width = 954;\n      var height = 954;\n\n      const keys = d3.range(1, 32);\n      //console.log(keys)\n      //console.log(this.treemapData)\n\n      var data = this.treemapData;\n\n      data.forEach(function(d) { \n        d.name = d.ORIGIN_STATE_NM\n        d.values =  keys.map(key => +d[key].replace(/,/g, \"\"))\n      });\n      //console.log(data)\n      \n      const regionByState = new Map(this.region.map(d => [d.State, d.Region]));\n      //console.log(regionByState)\n      const divisionByState = new Map(this.region.map(d => [d.State, d.Division]));\n      //console.log(divisionByState)\n\n      const group = d3.group(data, d => regionByState.get(d.ORIGIN_STATE_NM), d => divisionByState.get(d.ORIGIN_STATE_NM))\n      //console.log(group)\n\n      var color = d3.scaleOrdinal(group.keys(), d3.schemeCategory10.map(d => d3.interpolateRgb(d, \"white\")(0.5)))\n      //console.log(color)\n\n      var sums = keys.map((d, i) => d3.hierarchy(group).sum(d => d.values[i]).value);\n      //console.log(sums)\n\n      var max = d3.max(sums);\n      //console.log(max)\n\n      const treemap = d3.treemap()\n      .tile(d3.treemapResquarify)\n      .size([width, height])\n      .padding(d => d.height === 1 ? 1 : 0)\n      .round(true);\n\n      //console.log(treemap)\n\n      const root = treemap(d3.hierarchy(group)\n        .sum(d => Array.isArray(d.values) ? d3.sum(d.values) : 0)\n        .sort((a, b) => b.value - a.value));\n      //console.log(root)\n    \n\n    var svg = d3.select(\"#treemap\")\n        .append(\"svg\")\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", 10)\n        .style(\"overflow\", \"visible\");\n\n    var formatNumber = d3.format(\",d\");\n    var duration = 2500;\n    var parseNumber = string => +string.replace(/,/g, \"\");\n\n    var box = svg.append(\"g\")\n    .selectAll(\"g\")\n    .data(keys.map((key, i) => {\n      const value = root.sum(d => d.values[i]).value;\n      return {key, value, i, k: Math.sqrt(value / max)};\n    }).reverse())\n    .join(\"g\")\n      .attr(\"transform\", ({k}) => `translate(${(1 - k) / 2 * width},${(1 - k) / 2 * height})`)\n      .call(g => g.append(\"text\")\n          .attr(\"y\", -6)\n          .attr(\"fill\", \"#777\")\n        .selectAll(\"tspan\")\n        .data(({key, value}) => [key, ` ${formatNumber(value)}`])\n        .join(\"tspan\")\n          .attr(\"font-weight\", (d, i) => i === 0 ? \"bold\" : null)\n          .text(d => d))\n      .call(g => g.append(\"rect\")\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"#ccc\")\n          .attr(\"width\", ({k}) => k * width )\n          .attr(\"height\", ({k}) => k * height));\n      \n      //console.log(box)\n\n       const leaf = svg.append(\"g\")\n          .selectAll(\"g\")\n          .data(layout(keys))\n          .join(\"g\")\n            .attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\n        //console.log(leaf)\n        \n        leaf.append(\"rect\")\n            //.attr(\"id\", d => (d.leafUid = DOM.uid(\"leaf\")).id)\n            .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return color(keys); })\n            .attr(\"width\", d => d.x1 - d.x0)\n            .attr(\"height\", d => d.y1 - d.y0);\n        /*\n        leaf.append(\"clipPath\")\n            .attr(\"id\", d => (d.clipUid = DOM.uid(\"clip\")).id)\n          .append(\"use\")\n            .attr(\"xlink:href\", d => d.leafUid.href);\n        */\n        leaf.append(\"text\")\n            .attr(\"clip-path\", d => d.clipUid)\n          .selectAll(\"tspan\")\n          .data([group.name, formatNumber(group.value)])\n          .join(\"tspan\")\n            .attr(\"x\", 3)\n            .attr(\"y\", (d, i, nodes) => `${(i === nodes.length - 1) * 0.3 + 1.1 + i * 0.9}em`)\n            .attr(\"fill-opacity\", (d, i, nodes) => i === nodes.length - 1 ? 0.7 : null)\n            .text(d => d);\n\n        leaf.append(\"title\")\n            .text(group.name);\n\n        function layout(index) {\n          const k = Math.sqrt(root.sum(d => d.values[index]).value / max);\n          const x = (1 - k) / 2 * width;\n          const y = (1 - k) / 2 * height;\n          return treemap.size([width * k, height * k])(root)\n            .each(d => (d.x0 += x, d.x1 += x, d.y0 += y, d.y1 += y))\n            .leaves();\n        }\n\n  return Object.assign(svg.node(), {\n    update(index) {\n      box.transition()\n          .duration(duration)\n          .attr(\"opacity\", ({i}) => i >= index ? 1 : 0);\n\n      leaf.data(layout(index)).transition()\n          .duration(duration)\n          .ease(d3.easeLinear)\n          .attr(\"transform\", d => `translate(${d.x0},${d.y0})`)\n          .call(leaf => leaf.select(\"rect\")\n              .attr(\"width\", d => d.x1 - d.x0)\n              .attr(\"height\", d => d.y1 - d.y0))\n          .call(leaf => leaf.select(\"text tspan:last-child\")\n              .tween(\"text\", function(d) {\n                const i = d3.interpolate(parseNumber(this.textContent), d.value);\n                return function(t) { this.textContent = formatNumber(i(t)); };\n              }));\n    }\n  });\n\n    },\n    buildPieChart(){\n\n        var width = 600;\n        var height = 600;\n        var radius = Math.min(width, height) / 2;\n        var donutWidth = 120;\n        var legendRectSize = 15;\n        var legendSpacing = 5;\n\n        var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n        var dataset = this.pieData;\n        \n        dataset.forEach(function(d) {\n            d.count = +d.count;\n          });\n\n        console.log(dataset);\n\n        var svg = d3.select('#pie_chart')\n          .append('svg')\n          .attr('width', width)\n          .attr('height', height)\n          .append('g')\n          .attr('transform', 'translate(' + (width / 2) + \n            ',' + (height / 2) + ')');\n\n        var arc = d3.arc()\n          .innerRadius(radius - donutWidth)\n          .outerRadius(radius);\n\n        var pie = d3.pie()\n          .value(function(d) { return d.count; })\n          .sort(null);\n                                 \n\n          var path = svg.selectAll('path')\n            .data(pie(dataset))\n            .enter()\n            .append('path')\n            .attr('d', arc)\n            .attr('fill', function(d) { \n              return color(d.data.label);\n            })\n            .on('mouseover', function(d,i) {                            \n            var total = d3.sum(dataset.map(function(d) {  \n              return d.count;                                           \n            }));                                                          \n            var percent = Math.round(1000 * i.data.count / total) / 10; \n\n            d3.select(this)\n            .attr(\"stroke\", \"#000\")\n\n            svg.append(\"text\")\n            .attr(\"y\", 100)\n            .style(\"text-anchor\", \"middle\")\n            .style(\"font-size\", 24)\n            .attr(\"class\",\"label\")\n            .style(\"fill\", color(i.data.label))\n            .text(\"Percentage:\" + percent + \"%\");\n\n            svg.append(\"text\")\n            .attr(\"y\", -90)\n            .style(\"text-anchor\", \"middle\")\n            .style(\"font-size\", 24)\n            .attr(\"class\",\"label2\")\n            .style(\"fill\", color(i.data.label))\n            .text(i.data.label);\n\n          });               \n          \n          path.on('mouseout', function() {                                \n            d3.select(this).attr(\"stroke\", null);  \n            svg.select(\".label\").remove();\n            svg.select(\".label2\").remove();                         \n          });                                                             \n\n        /*\n          path.on('mousemove', function(d) {  \n            tooltip.style('top', (d.pageY + 10) + 'px')          \n              .style('left', (d3.pageX + 10) + 'px');             \n          });      */                                                     \n            \n          var legend = svg.selectAll('.legend')\n            .data(color.domain())\n            .enter()\n            .append('g')\n            .attr('class', 'legend')\n            .attr('transform', function(d, i) {\n              var height = legendRectSize + legendSpacing;\n              var offset =  height * color.domain().length / 2;\n              var horz = -6 * legendRectSize;\n              var vert = i * height - offset;\n              return 'translate(' + horz + ',' + vert + ')';\n            });\n\n          legend.append('rect')\n            .attr('width', legendRectSize)\n            .attr('height', legendRectSize)                                   \n            .style('fill', color)\n            .style('stroke', color);\n            \n          legend.append('text')\n            .attr('x', legendRectSize + legendSpacing)\n            .attr('y', legendRectSize - legendSpacing)\n            .text(function(d) { return d; });\n    }\n\n  },\n  mounted: function () {\n\n    if (!this.$store.state.htmlMapData) {\n      var promises = []\n      promises.push(d3.csv('Data_for_line_chart.csv'))\n      promises.push(d3.csv('us-region.csv'))\n      promises.push(d3.csv('Data_for_treemap.csv'))\n      promises.push(d3.csv('delay.csv'))\n      Promise.all(promises).then(values => {\n        this.rawData = values\n        this.lineData = values[0]\n        this.region = values[1]\n        this.treemapData = values[2]\n        this.pieData = values[3]\n        this.$store.commit('htmlMapData', this.rawData);\n        //this.chart();\n        this.buildLineChart();\n        //this.buildTreemap();\n        this.buildPieChart();\n      })\n    } else {\n      this.rawData = this.$store.state.htmlMapData;\n      this.lineData = this.rawData[0]\n      this.region = this.rawData[1]\n      this.treemapData = this.rawData[2]\n      this.chart();\n      this.buildLineChart();\n      //this.buildTreemap();\n      this.buildPieChart();\n    }\n\n    }\n  }\n\n</script>\n\n<style>\n.title{\n  font-size: 24px;\n\n}\n\n</style>\n\n/*reference:\nOverall:\nhttps://observablehq.com/@hydrosquall/d3-tutorial-interactivity-animated-transitions\n\nLine Plot:\nhttps://www.d3-graph-gallery.com/graph/line_several_group.html\n\nMouseOver:\nhttp://bl.ocks.org/WilliamQLiu/76ae20060e19bf42d774\nhttps://codepen.io/zakariachowdhury/pen/JEmjwq\n\nAnimation:\nhttps://bl.ocks.org/phvaillant/53b90038b9c5ac5f6b817a4f63fbc2af\nhttp://bl.ocks.org/atmccann/8966400\n\n*/"],"sourceRoot":"src/views"}]}